
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00002086  0000211a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a5  008001d2  008001d2  000021ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000221c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000580e  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000161f  00000000  00000000  00007eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eec  00000000  00000000  000094f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e78  00000000  00000000  0000c3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c20  00000000  00000000  0000d260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005401  00000000  00000000  0000ee80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  00014281  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__vector_13>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_16>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__vector_20>
      54:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_21>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      6c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      70:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_28>
      74:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__vector_29>
      78:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      7c:	c9 00       	.word	0x00c9	; ????
      7e:	c7 00       	.word	0x00c7	; ????
      80:	c7 00       	.word	0x00c7	; ????
      82:	c9 00       	.word	0x00c9	; ????
      84:	c7 00       	.word	0x00c7	; ????
      86:	c7 00       	.word	0x00c7	; ????
      88:	c7 00       	.word	0x00c7	; ????
      8a:	c7 00       	.word	0x00c7	; ????
      8c:	c7 00       	.word	0x00c7	; ????
      8e:	c7 00       	.word	0x00c7	; ????
      90:	c7 00       	.word	0x00c7	; ????
      92:	c7 00       	.word	0x00c7	; ????
      94:	c7 00       	.word	0x00c7	; ????
      96:	c7 00       	.word	0x00c7	; ????
      98:	c7 00       	.word	0x00c7	; ????
      9a:	c7 00       	.word	0x00c7	; ????
      9c:	c7 00       	.word	0x00c7	; ????
      9e:	c7 00       	.word	0x00c7	; ????
      a0:	c9 00       	.word	0x00c9	; ????
      a2:	c7 00       	.word	0x00c7	; ????
      a4:	c7 00       	.word	0x00c7	; ????
      a6:	c7 00       	.word	0x00c7	; ????
      a8:	c9 00       	.word	0x00c9	; ????
      aa:	c7 00       	.word	0x00c7	; ????
      ac:	c7 00       	.word	0x00c7	; ????
      ae:	c7 00       	.word	0x00c7	; ????
      b0:	c7 00       	.word	0x00c7	; ????
      b2:	c7 00       	.word	0x00c7	; ????
      b4:	c7 00       	.word	0x00c7	; ????
      b6:	c7 00       	.word	0x00c7	; ????
      b8:	c7 00       	.word	0x00c7	; ????
      ba:	c7 00       	.word	0x00c7	; ????
      bc:	c9 00       	.word	0x00c9	; ????
      be:	c7 00       	.word	0x00c7	; ????
      c0:	c7 00       	.word	0x00c7	; ????
      c2:	c9 00       	.word	0x00c9	; ????
      c4:	c7 00       	.word	0x00c7	; ????
      c6:	c7 00       	.word	0x00c7	; ????
      c8:	c7 00       	.word	0x00c7	; ????
      ca:	c7 00       	.word	0x00c7	; ????
      cc:	c7 00       	.word	0x00c7	; ????
      ce:	c7 00       	.word	0x00c7	; ????
      d0:	c7 00       	.word	0x00c7	; ????
      d2:	c7 00       	.word	0x00c7	; ????
      d4:	c7 00       	.word	0x00c7	; ????
      d6:	c7 00       	.word	0x00c7	; ????
      d8:	c7 00       	.word	0x00c7	; ????
      da:	c7 00       	.word	0x00c7	; ????
      dc:	c7 00       	.word	0x00c7	; ????
      de:	c7 00       	.word	0x00c7	; ????
      e0:	c9 00       	.word	0x00c9	; ????
      e2:	c7 00       	.word	0x00c7	; ????
      e4:	c7 00       	.word	0x00c7	; ????
      e6:	c7 00       	.word	0x00c7	; ????
      e8:	c9 00       	.word	0x00c9	; ????

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e6 e8       	ldi	r30, 0x86	; 134
      fe:	f0 e2       	ldi	r31, 0x20	; 32
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a2 3d       	cpi	r26, 0xD2	; 210
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	26 e0       	ldi	r18, 0x06	; 6
     10e:	a2 ed       	ldi	r26, 0xD2	; 210
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a7 37       	cpi	r26, 0x77	; 119
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 df 01 	call	0x3be	; 0x3be <main>
     120:	0c 94 41 10 	jmp	0x2082	; 0x2082 <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <processMatrix>:
	//The parameters are not used
	( void ) pvParameters;
	
	while (1) {
		//See if we can obtain the semaphore. If the semaphore is not available, wait 10 ticks to see if it becomes free.
		xSemaphoreTake(xMutexReceivedData, (TickType_t) 0);
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <xMutexReceivedData>
     136:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <xMutexReceivedData+0x1>
     13a:	0e 94 15 09 	call	0x122a	; 0x122a <xQueueGenericReceive>
		if (run_process_matrix == 1) {
     13e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <run_process_matrix>
     142:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <run_process_matrix+0x1>
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	41 f4       	brne	.+16     	; 0x15a <processMatrix+0x32>
			
			// Start the display handler timer
			init_display_timer(handle_display_process_matrix);
     14a:	87 eb       	ldi	r24, 0xB7	; 183
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 25 02 	call	0x44a	; 0x44a <init_display_timer>
			
			//com_send_bytes((uint8_t *)"Processing matrix\n", 19);
			//vTaskDelay(50);
			run_process_matrix = 0;
     152:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <run_process_matrix+0x1>
     156:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <run_process_matrix>
		}
		// We have finished accessing the shared resource. Release the semaphore.
		xSemaphoreGive(xMutexReceivedData);
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	40 e0       	ldi	r20, 0x00	; 0
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <xMutexReceivedData>
     168:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <xMutexReceivedData+0x1>
     16c:	0e 94 20 08 	call	0x1040	; 0x1040 <xQueueGenericSend>
	}
     170:	db cf       	rjmp	.-74     	; 0x128 <processMatrix>

00000172 <correctArrowKey>:



bool correctArrowKey(char data_received[])
{
	switch (data_received[0])
     172:	dc 01       	movw	r26, r24
     174:	ec 91       	ld	r30, X
     176:	8e 2f       	mov	r24, r30
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	fc 01       	movw	r30, r24
     17c:	e1 54       	subi	r30, 0x41	; 65
     17e:	f1 09       	sbc	r31, r1
     180:	e7 33       	cpi	r30, 0x37	; 55
     182:	f1 05       	cpc	r31, r1
     184:	20 f4       	brcc	.+8      	; 0x18e <correctArrowKey+0x1c>
     186:	e2 5c       	subi	r30, 0xC2	; 194
     188:	ff 4f       	sbci	r31, 0xFF	; 255
     18a:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__tablejump2__>
		case 0x77: return true;		//w
		case 0x44 : return true;	//D
		case 0x64 : return true;	//d
		case 0x53 : return true;		//S
		case 0x73 : return true;		//s
		default  : return false;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	08 95       	ret

bool correctArrowKey(char data_received[])
{
	switch (data_received[0])
	{
		case 0x41 : return true;	//A
     192:	81 e0       	ldi	r24, 0x01	; 1
		case 0x53 : return true;		//S
		case 0x73 : return true;		//s
		default  : return false;

	}
}
     194:	08 95       	ret

00000196 <waitForKeyPress>:
		xSemaphoreGive(xMutexReceivedData);
	}

}

void waitForKeyPress(void *pvParameters){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	1f 92       	push	r1
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62

	//The parameters are not used
	( void ) pvParameters;

	//Variables
	uint8_t data[] = "";
     1a0:	19 82       	std	Y+1, r1	; 0x01
	
	_received_chars_queue = xQueueCreate(_COM_RX_QUEUE_LENGTH, (unsigned portBASE_TYPE) sizeof (uint8_t));
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	8e e1       	ldi	r24, 0x1E	; 30
     1a8:	0e 94 ef 07 	call	0xfde	; 0xfde <xQueueGenericCreate>
     1ac:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <_received_chars_queue+0x1>
     1b0:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <_received_chars_queue>
	init_com(_received_chars_queue);	//Initialize comPort at the board
     1b4:	0e 94 20 02 	call	0x440	; 0x440 <init_com>


	//Semaphore
	xMutexReceivedData = xSemaphoreCreateMutex();
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 c1 08 	call	0x1182	; 0x1182 <xQueueCreateMutex>
     1be:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <xMutexReceivedData+0x1>
     1c2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <xMutexReceivedData>
	//Take semaphore before everything happens
	//xSemaphoreTake(xMutexReceivedData, (TickType_t) 0);

	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <vTaskSetApplicationTaskTag>
	#endif

	while (start_game == 1) {
     1d2:	2d c0       	rjmp	.+90     	; 0x22e <waitForKeyPress+0x98>
		//Check until we receive something - Waiting for a number 1.
		if (xQueueReceive(_received_chars_queue, &data, ( TickType_t ) 10)) {
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	4a e0       	ldi	r20, 0x0A	; 10
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	be 01       	movw	r22, r28
     1dc:	6f 5f       	subi	r22, 0xFF	; 255
     1de:	7f 4f       	sbci	r23, 0xFF	; 255
     1e0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_received_chars_queue>
     1e4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <_received_chars_queue+0x1>
     1e8:	0e 94 15 09 	call	0x122a	; 0x122a <xQueueGenericReceive>
     1ec:	88 23       	and	r24, r24
     1ee:	f9 f0       	breq	.+62     	; 0x22e <waitForKeyPress+0x98>
			com_send_bytes(data, 1);
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	ce 01       	movw	r24, r28
     1f4:	01 96       	adiw	r24, 0x01	; 1
     1f6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <com_send_bytes>

			if (data[0] == 49){		//If it's equal as 1
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	81 33       	cpi	r24, 0x31	; 49
     1fe:	71 f4       	brne	.+28     	; 0x21c <waitForKeyPress+0x86>
				//Send first confirmation message to the console.
				com_send_bytes((uint8_t *)" Ready to receive - Reading...\n", 32);
     200:	60 e2       	ldi	r22, 0x20	; 32
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 60 02 	call	0x4c0	; 0x4c0 <com_send_bytes>
				vTaskDelay(50);
     20a:	82 e3       	ldi	r24, 0x32	; 50
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <vTaskDelay>
				start_game = 0;
     212:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <start_game+0x1>
     216:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <start_game>
     21a:	09 c0       	rjmp	.+18     	; 0x22e <waitForKeyPress+0x98>
				} else {
				com_send_bytes((uint8_t *)"Not a valid key - Press 1 to play\n", 35);
     21c:	63 e2       	ldi	r22, 0x23	; 35
     21e:	8c e2       	ldi	r24, 0x2C	; 44
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	0e 94 60 02 	call	0x4c0	; 0x4c0 <com_send_bytes>
				vTaskDelay(100);
     226:	84 e6       	ldi	r24, 0x64	; 100
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <vTaskDelay>
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
	#endif

	while (start_game == 1) {
     22e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <start_game>
     232:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <start_game+0x1>
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	69 f2       	breq	.-102    	; 0x1d4 <waitForKeyPress+0x3e>
				vTaskDelay(100);
			}
		}
	}

	init_com(_received_chars_queue);	//Initialize comPort at the board
     23a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_received_chars_queue>
     23e:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <_received_chars_queue+0x1>
     242:	0e 94 20 02 	call	0x440	; 0x440 <init_com>
		xSemaphoreTake(xMutexReceivedData, (TickType_t) 0 );
		if (xQueueReceive(_received_chars_queue, &data,  ( TickType_t ) 10)){
			if (correctArrowKey(&data) == true) {
				com_send_bytes((uint8_t *)" Key: ", 6);
				com_send_bytes((uint8_t *)data, 1);
				run_process_matrix = 1;
     246:	01 e0       	ldi	r16, 0x01	; 1
     248:	10 e0       	ldi	r17, 0x00	; 0
	}

	init_com(_received_chars_queue);	//Initialize comPort at the board
	
	while (1) {
		xSemaphoreTake(xMutexReceivedData, (TickType_t) 0 );
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <xMutexReceivedData>
     258:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <xMutexReceivedData+0x1>
     25c:	0e 94 15 09 	call	0x122a	; 0x122a <xQueueGenericReceive>
		if (xQueueReceive(_received_chars_queue, &data,  ( TickType_t ) 10)){
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	4a e0       	ldi	r20, 0x0A	; 10
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	be 01       	movw	r22, r28
     268:	6f 5f       	subi	r22, 0xFF	; 255
     26a:	7f 4f       	sbci	r23, 0xFF	; 255
     26c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_received_chars_queue>
     270:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <_received_chars_queue+0x1>
     274:	0e 94 15 09 	call	0x122a	; 0x122a <xQueueGenericReceive>
     278:	88 23       	and	r24, r24
     27a:	39 f3       	breq	.-50     	; 0x24a <waitForKeyPress+0xb4>
			if (correctArrowKey(&data) == true) {
     27c:	ce 01       	movw	r24, r28
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	0e 94 b9 00 	call	0x172	; 0x172 <correctArrowKey>
     284:	88 23       	and	r24, r24
     286:	d1 f0       	breq	.+52     	; 0x2bc <waitForKeyPress+0x126>
				com_send_bytes((uint8_t *)" Key: ", 6);
     288:	66 e0       	ldi	r22, 0x06	; 6
     28a:	8f e4       	ldi	r24, 0x4F	; 79
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <com_send_bytes>
				com_send_bytes((uint8_t *)data, 1);
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	ce 01       	movw	r24, r28
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	0e 94 60 02 	call	0x4c0	; 0x4c0 <com_send_bytes>
				run_process_matrix = 1;
     29c:	10 93 d5 01 	sts	0x01D5, r17	; 0x8001d5 <run_process_matrix+0x1>
     2a0:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <run_process_matrix>
				xSemaphoreGive(xMutexReceivedData);
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <xMutexReceivedData>
     2b2:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <xMutexReceivedData+0x1>
     2b6:	0e 94 20 08 	call	0x1040	; 0x1040 <xQueueGenericSend>
     2ba:	c7 cf       	rjmp	.-114    	; 0x24a <waitForKeyPress+0xb4>
				} else if (data[0] == 32) {
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	80 32       	cpi	r24, 0x20	; 32
     2c0:	71 f4       	brne	.+28     	; 0x2de <waitForKeyPress+0x148>
				// Start the display handler timer
				init_display_timer(handle_display);
     2c2:	80 e9       	ldi	r24, 0x90	; 144
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	0e 94 25 02 	call	0x44a	; 0x44a <init_display_timer>
				com_send_bytes((uint8_t *)"Pause mode\n", 12);
     2ca:	6c e0       	ldi	r22, 0x0C	; 12
     2cc:	86 e5       	ldi	r24, 0x56	; 86
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <com_send_bytes>
				vTaskDelay(10);
     2d4:	8a e0       	ldi	r24, 0x0A	; 10
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 c3 0c 	call	0x1986	; 0x1986 <vTaskDelay>
     2dc:	b6 cf       	rjmp	.-148    	; 0x24a <waitForKeyPress+0xb4>
				} else {
				// Start the display handler timer
				init_display_timer(handle_display);
     2de:	80 e9       	ldi	r24, 0x90	; 144
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 25 02 	call	0x44a	; 0x44a <init_display_timer>
				com_send_bytes((uint8_t *)"Not a valid key\n", 16);
     2e6:	60 e1       	ldi	r22, 0x10	; 16
     2e8:	82 e6       	ldi	r24, 0x62	; 98
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <com_send_bytes>
				vTaskDelay(10);
     2f0:	8a e0       	ldi	r24, 0x0A	; 10
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <vTaskDelay>
     2f8:	a8 cf       	rjmp	.-176    	; 0x24a <waitForKeyPress+0xb4>

000002fa <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     2fa:	5a 9a       	sbi	0x0b, 2	; 11
     2fc:	08 95       	ret

000002fe <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     2fe:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     300:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     302:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     304:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     306:	5a 98       	cbi	0x0b, 2	; 11
     308:	08 95       	ret

0000030a <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     30a:	80 95       	com	r24
     30c:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     30e:	85 b1       	in	r24, 0x05	; 5
     310:	83 60       	ori	r24, 0x03	; 3
     312:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     314:	85 b1       	in	r24, 0x05	; 5
     316:	93 70       	andi	r25, 0x03	; 3
     318:	90 95       	com	r25
     31a:	89 23       	and	r24, r25
     31c:	85 b9       	out	0x05, r24	; 5
     31e:	08 95       	ret

00000320 <handle_display>:
	}
}

//-----------------------------------------
void handle_display(void)
{
     320:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     322:	c0 91 d3 01 	lds	r28, 0x01D3	; 0x8001d3 <col.2595>
     326:	c1 11       	cpse	r28, r1
     328:	0c c0       	rjmp	.+24     	; 0x342 <handle_display+0x22>
	{
		prepare_shiftregister();
     32a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 85 01 	call	0x30a	; 0x30a <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     336:	0e 94 7f 01 	call	0x2fe	; 0x2fe <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <col.2595>
     340:	14 c0       	rjmp	.+40     	; 0x36a <handle_display+0x4a>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     342:	ec 2f       	mov	r30, r28
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	ef 54       	subi	r30, 0x4F	; 79
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	0e 94 85 01 	call	0x30a	; 0x30a <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     356:	0e 94 7f 01 	call	0x2fe	; 0x2fe <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     35a:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     35c:	ce 30       	cpi	r28, 0x0E	; 14
     35e:	18 f4       	brcc	.+6      	; 0x366 <handle_display+0x46>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     360:	c0 93 d3 01 	sts	0x01D3, r28	; 0x8001d3 <col.2595>
     364:	02 c0       	rjmp	.+4      	; 0x36a <handle_display+0x4a>
	if (col > 13)
	{
		col = 0;
     366:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <col.2595>
	}
}
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <handle_display_process_matrix>:

void handle_display_process_matrix(void){
     36e:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     370:	c0 91 d2 01 	lds	r28, 0x01D2	; 0x8001d2 <__data_end>
     374:	c1 11       	cpse	r28, r1
     376:	0c c0       	rjmp	.+24     	; 0x390 <handle_display_process_matrix+0x22>
	{
		prepare_shiftregister();
     378:	0e 94 7d 01 	call	0x2fa	; 0x2fa <prepare_shiftregister>
	}
	
	load_col_value(frame2_buf[col]);
     37c:	84 ef       	ldi	r24, 0xF4	; 244
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 85 01 	call	0x30a	; 0x30a <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     384:	0e 94 7f 01 	call	0x2fe	; 0x2fe <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
     38e:	14 c0       	rjmp	.+40     	; 0x3b8 <handle_display_process_matrix+0x4a>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame2_buf[col]);
     390:	ec 2f       	mov	r30, r28
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	eb 56       	subi	r30, 0x6B	; 107
     39a:	fe 4f       	sbci	r31, 0xFE	; 254
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	0e 94 85 01 	call	0x30a	; 0x30a <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     3a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     3a8:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     3aa:	ce 30       	cpi	r28, 0x0E	; 14
     3ac:	18 f4       	brcc	.+6      	; 0x3b4 <handle_display_process_matrix+0x46>
	load_col_value(frame2_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     3ae:	c0 93 d2 01 	sts	0x01D2, r28	; 0x8001d2 <__data_end>
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <handle_display_process_matrix+0x4a>
	if (col > 13)
	{
		col = 0;
     3b4:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
	}
}
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <vApplicationIdleHook>:



//Don't delete or program crashes..
void vApplicationIdleHook( void )
{
     3bc:	08 95       	ret

000003be <main>:
}

//-----------------------------------------
int main(void)
{
	init_board();
     3be:	0e 94 69 02 	call	0x4d2	; 0x4d2 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     3c2:	5e 98       	cbi	0x0b, 6	; 11

	//Create task to check key press
	BaseType_t taskWaitForKeyPress = xTaskCreate(waitForKeyPress, (const char *)"Wait for key press", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     3c4:	e1 2c       	mov	r14, r1
     3c6:	f1 2c       	mov	r15, r1
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	45 e5       	ldi	r20, 0x55	; 85
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	63 e7       	ldi	r22, 0x73	; 115
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	8b ec       	ldi	r24, 0xCB	; 203
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 44 0a 	call	0x1488	; 0x1488 <xTaskCreate>
	
	BaseType_t taskProcessMatrix = xTaskCreate(processMatrix, (const char *)"Process Matrix", configMINIMAL_STACK_SIZE, (void *) NULL, tskIDLE_PRIORITY, NULL);
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	45 e5       	ldi	r20, 0x55	; 85
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	66 e8       	ldi	r22, 0x86	; 134
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	84 e9       	ldi	r24, 0x94	; 148
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 44 0a 	call	0x1488	; 0x1488 <xTaskCreate>

	// Start the display handler timer
	init_display_timer(handle_display);
     3f2:	80 e9       	ldi	r24, 0x90	; 144
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 25 02 	call	0x44a	; 0x44a <init_display_timer>
	
	sei();
     3fa:	78 94       	sei

	//Start the scheduler
	vTaskStartScheduler();
     3fc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <vTaskStartScheduler>
     400:	ff cf       	rjmp	.-2      	; 0x400 <__LOCK_REGION_LENGTH__>

00000402 <_com_call_back>:
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <_com_call_back+0x6>
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	6a 83       	std	Y+2, r22	; 0x02
     40e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_x_rx_com_queue>
     412:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <_x_rx_com_queue+0x1>
     416:	00 97       	sbiw	r24, 0x00	; 0
     418:	71 f0       	breq	.+28     	; 0x436 <_com_call_back+0x34>
     41a:	19 82       	std	Y+1, r1	; 0x01
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	ae 01       	movw	r20, r28
     420:	4f 5f       	subi	r20, 0xFF	; 255
     422:	5f 4f       	sbci	r21, 0xFF	; 255
     424:	be 01       	movw	r22, r28
     426:	6e 5f       	subi	r22, 0xFE	; 254
     428:	7f 4f       	sbci	r23, 0xFF	; 255
     42a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <xQueueGenericSendFromISR>
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	81 11       	cpse	r24, r1
     432:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_com>:
     440:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <_x_rx_com_queue+0x1>
     444:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_x_rx_com_queue>
     448:	08 95       	ret

0000044a <init_display_timer>:
     44a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <cb_ptr+0x1>
     44e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <cb_ptr>
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	87 bd       	out	0x27, r24	; 39
     456:	84 b5       	in	r24, 0x24	; 36
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	84 bd       	out	0x24, r24	; 36
     45c:	ee e6       	ldi	r30, 0x6E	; 110
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	82 60       	ori	r24, 0x02	; 2
     464:	80 83       	st	Z, r24
     466:	85 b5       	in	r24, 0x25	; 37
     468:	85 60       	ori	r24, 0x05	; 5
     46a:	85 bd       	out	0x25, r24	; 37
     46c:	08 95       	ret

0000046e <__vector_16>:
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	2f 93       	push	r18
     47a:	3f 93       	push	r19
     47c:	4f 93       	push	r20
     47e:	5f 93       	push	r21
     480:	6f 93       	push	r22
     482:	7f 93       	push	r23
     484:	8f 93       	push	r24
     486:	9f 93       	push	r25
     488:	af 93       	push	r26
     48a:	bf 93       	push	r27
     48c:	ef 93       	push	r30
     48e:	ff 93       	push	r31
     490:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <cb_ptr>
     494:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <cb_ptr+0x1>
     498:	30 97       	sbiw	r30, 0x00	; 0
     49a:	09 f0       	breq	.+2      	; 0x49e <__vector_16+0x30>
     49c:	09 95       	icall
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <com_send_bytes>:
     4c0:	46 2f       	mov	r20, r22
     4c2:	bc 01       	movw	r22, r24
     4c4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_com_serial_instance>
     4c8:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_com_serial_instance+0x1>
     4cc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <serial_send_bytes>
     4d0:	08 95       	ret

000004d2 <init_board>:
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	0f 93       	push	r16
     4e2:	8d ef       	ldi	r24, 0xFD	; 253
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 c2 02 	call	0x584	; 0x584 <buffer_init>
     4ea:	8a ed       	ldi	r24, 0xDA	; 218
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 c2 02 	call	0x584	; 0x584 <buffer_init>
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	8f 2e       	mov	r8, r31
     4f8:	f2 e0       	ldi	r31, 0x02	; 2
     4fa:	9f 2e       	mov	r9, r31
     4fc:	f0 2d       	mov	r31, r0
     4fe:	0f 2e       	mov	r0, r31
     500:	fa ed       	ldi	r31, 0xDA	; 218
     502:	af 2e       	mov	r10, r31
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	bf 2e       	mov	r11, r31
     508:	f0 2d       	mov	r31, r0
     50a:	0f 2e       	mov	r0, r31
     50c:	fd ef       	ldi	r31, 0xFD	; 253
     50e:	cf 2e       	mov	r12, r31
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	df 2e       	mov	r13, r31
     514:	f0 2d       	mov	r31, r0
     516:	e1 2c       	mov	r14, r1
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	23 e0       	ldi	r18, 0x03	; 3
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	52 ec       	ldi	r21, 0xC2	; 194
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 23 05 	call	0xa46	; 0xa46 <serial_new_instance>
     52a:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <_com_serial_instance+0x1>
     52e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_com_serial_instance>
     532:	88 b1       	in	r24, 0x08	; 8
     534:	83 6c       	ori	r24, 0xC3	; 195
     536:	88 b9       	out	0x08, r24	; 8
     538:	5b 9a       	sbi	0x0b, 3	; 11
     53a:	8a b1       	in	r24, 0x0a	; 10
     53c:	84 67       	ori	r24, 0x74	; 116
     53e:	8a b9       	out	0x0a, r24	; 10
     540:	5e 9a       	sbi	0x0b, 6	; 11
     542:	81 b1       	in	r24, 0x01	; 1
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	81 b9       	out	0x01, r24	; 1
     548:	84 b1       	in	r24, 0x04	; 4
     54a:	83 60       	ori	r24, 0x03	; 3
     54c:	84 b9       	out	0x04, r24	; 4
     54e:	84 b1       	in	r24, 0x04	; 4
     550:	8c 63       	ori	r24, 0x3C	; 60
     552:	84 b9       	out	0x04, r24	; 4
     554:	0f 91       	pop	r16
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	bf 90       	pop	r11
     55e:	af 90       	pop	r10
     560:	9f 90       	pop	r9
     562:	8f 90       	pop	r8
     564:	08 95       	ret

00000566 <switch_in>:
     566:	95 b1       	in	r25, 0x05	; 5
     568:	93 7c       	andi	r25, 0xC3	; 195
     56a:	95 b9       	out	0x05, r25	; 5
     56c:	25 b1       	in	r18, 0x05	; 5
     56e:	34 e0       	ldi	r19, 0x04	; 4
     570:	83 9f       	mul	r24, r19
     572:	c0 01       	movw	r24, r0
     574:	11 24       	eor	r1, r1
     576:	82 2b       	or	r24, r18
     578:	85 b9       	out	0x05, r24	; 5
     57a:	08 95       	ret

0000057c <switch_out>:
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	83 7c       	andi	r24, 0xC3	; 195
     580:	85 b9       	out	0x05, r24	; 5
     582:	08 95       	ret

00000584 <buffer_init>:
     584:	fc 01       	movw	r30, r24
     586:	10 a2       	std	Z+32, r1	; 0x20
     588:	11 a2       	std	Z+33, r1	; 0x21
     58a:	12 a2       	std	Z+34, r1	; 0x22
     58c:	08 95       	ret

0000058e <buffer_get_item>:
     58e:	fc 01       	movw	r30, r24
     590:	82 a1       	ldd	r24, Z+34	; 0x22
     592:	88 23       	and	r24, r24
     594:	d9 f0       	breq	.+54     	; 0x5cc <buffer_get_item+0x3e>
     596:	81 a1       	ldd	r24, Z+33	; 0x21
     598:	df 01       	movw	r26, r30
     59a:	a8 0f       	add	r26, r24
     59c:	b1 1d       	adc	r27, r1
     59e:	8c 91       	ld	r24, X
     5a0:	db 01       	movw	r26, r22
     5a2:	8c 93       	st	X, r24
     5a4:	21 a1       	ldd	r18, Z+33	; 0x21
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	2f 71       	andi	r18, 0x1F	; 31
     5ae:	30 78       	andi	r19, 0x80	; 128
     5b0:	33 23       	and	r19, r19
     5b2:	34 f4       	brge	.+12     	; 0x5c0 <buffer_get_item+0x32>
     5b4:	21 50       	subi	r18, 0x01	; 1
     5b6:	31 09       	sbc	r19, r1
     5b8:	20 6e       	ori	r18, 0xE0	; 224
     5ba:	3f 6f       	ori	r19, 0xFF	; 255
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	21 a3       	std	Z+33, r18	; 0x21
     5c2:	82 a1       	ldd	r24, Z+34	; 0x22
     5c4:	81 50       	subi	r24, 0x01	; 1
     5c6:	82 a3       	std	Z+34, r24	; 0x22
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	08 95       	ret
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	08 95       	ret

000005d0 <buffer_put_item>:
     5d0:	fc 01       	movw	r30, r24
     5d2:	42 a1       	ldd	r20, Z+34	; 0x22
     5d4:	40 32       	cpi	r20, 0x20	; 32
     5d6:	b8 f4       	brcc	.+46     	; 0x606 <buffer_put_item+0x36>
     5d8:	20 a1       	ldd	r18, Z+32	; 0x20
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	e2 0f       	add	r30, r18
     5de:	f3 1f       	adc	r31, r19
     5e0:	60 83       	st	Z, r22
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	2f 71       	andi	r18, 0x1F	; 31
     5e8:	30 78       	andi	r19, 0x80	; 128
     5ea:	33 23       	and	r19, r19
     5ec:	34 f4       	brge	.+12     	; 0x5fa <buffer_put_item+0x2a>
     5ee:	21 50       	subi	r18, 0x01	; 1
     5f0:	31 09       	sbc	r19, r1
     5f2:	20 6e       	ori	r18, 0xE0	; 224
     5f4:	3f 6f       	ori	r19, 0xFF	; 255
     5f6:	2f 5f       	subi	r18, 0xFF	; 255
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 a3       	std	Z+32, r18	; 0x20
     5fe:	4f 5f       	subi	r20, 0xFF	; 255
     600:	42 a3       	std	Z+34, r20	; 0x22
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	08 95       	ret
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	08 95       	ret

0000060a <vListInitialise>:
     60a:	fc 01       	movw	r30, r24
     60c:	03 96       	adiw	r24, 0x03	; 3
     60e:	92 83       	std	Z+2, r25	; 0x02
     610:	81 83       	std	Z+1, r24	; 0x01
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	3f ef       	ldi	r19, 0xFF	; 255
     616:	34 83       	std	Z+4, r19	; 0x04
     618:	23 83       	std	Z+3, r18	; 0x03
     61a:	96 83       	std	Z+6, r25	; 0x06
     61c:	85 83       	std	Z+5, r24	; 0x05
     61e:	90 87       	std	Z+8, r25	; 0x08
     620:	87 83       	std	Z+7, r24	; 0x07
     622:	10 82       	st	Z, r1
     624:	08 95       	ret

00000626 <vListInitialiseItem>:
     626:	fc 01       	movw	r30, r24
     628:	11 86       	std	Z+9, r1	; 0x09
     62a:	10 86       	std	Z+8, r1	; 0x08
     62c:	08 95       	ret

0000062e <vListInsertEnd>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	9c 01       	movw	r18, r24
     634:	fb 01       	movw	r30, r22
     636:	dc 01       	movw	r26, r24
     638:	11 96       	adiw	r26, 0x01	; 1
     63a:	cd 91       	ld	r28, X+
     63c:	dc 91       	ld	r29, X
     63e:	12 97       	sbiw	r26, 0x02	; 2
     640:	d3 83       	std	Z+3, r29	; 0x03
     642:	c2 83       	std	Z+2, r28	; 0x02
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	9d 81       	ldd	r25, Y+5	; 0x05
     648:	95 83       	std	Z+5, r25	; 0x05
     64a:	84 83       	std	Z+4, r24	; 0x04
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	9d 81       	ldd	r25, Y+5	; 0x05
     650:	dc 01       	movw	r26, r24
     652:	13 96       	adiw	r26, 0x03	; 3
     654:	7c 93       	st	X, r23
     656:	6e 93       	st	-X, r22
     658:	12 97       	sbiw	r26, 0x02	; 2
     65a:	7d 83       	std	Y+5, r23	; 0x05
     65c:	6c 83       	std	Y+4, r22	; 0x04
     65e:	31 87       	std	Z+9, r19	; 0x09
     660:	20 87       	std	Z+8, r18	; 0x08
     662:	f9 01       	movw	r30, r18
     664:	80 81       	ld	r24, Z
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 83       	st	Z, r24
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <vListInsert>:
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	eb 01       	movw	r28, r22
     676:	48 81       	ld	r20, Y
     678:	59 81       	ldd	r21, Y+1	; 0x01
     67a:	4f 3f       	cpi	r20, 0xFF	; 255
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	52 07       	cpc	r21, r18
     680:	21 f4       	brne	.+8      	; 0x68a <vListInsert+0x1a>
     682:	fc 01       	movw	r30, r24
     684:	a7 81       	ldd	r26, Z+7	; 0x07
     686:	b0 85       	ldd	r27, Z+8	; 0x08
     688:	0d c0       	rjmp	.+26     	; 0x6a4 <vListInsert+0x34>
     68a:	dc 01       	movw	r26, r24
     68c:	13 96       	adiw	r26, 0x03	; 3
     68e:	01 c0       	rjmp	.+2      	; 0x692 <vListInsert+0x22>
     690:	df 01       	movw	r26, r30
     692:	12 96       	adiw	r26, 0x02	; 2
     694:	ed 91       	ld	r30, X+
     696:	fc 91       	ld	r31, X
     698:	13 97       	sbiw	r26, 0x03	; 3
     69a:	20 81       	ld	r18, Z
     69c:	31 81       	ldd	r19, Z+1	; 0x01
     69e:	42 17       	cp	r20, r18
     6a0:	53 07       	cpc	r21, r19
     6a2:	b0 f7       	brcc	.-20     	; 0x690 <vListInsert+0x20>
     6a4:	12 96       	adiw	r26, 0x02	; 2
     6a6:	ed 91       	ld	r30, X+
     6a8:	fc 91       	ld	r31, X
     6aa:	13 97       	sbiw	r26, 0x03	; 3
     6ac:	fb 83       	std	Y+3, r31	; 0x03
     6ae:	ea 83       	std	Y+2, r30	; 0x02
     6b0:	d5 83       	std	Z+5, r29	; 0x05
     6b2:	c4 83       	std	Z+4, r28	; 0x04
     6b4:	bd 83       	std	Y+5, r27	; 0x05
     6b6:	ac 83       	std	Y+4, r26	; 0x04
     6b8:	13 96       	adiw	r26, 0x03	; 3
     6ba:	dc 93       	st	X, r29
     6bc:	ce 93       	st	-X, r28
     6be:	12 97       	sbiw	r26, 0x02	; 2
     6c0:	99 87       	std	Y+9, r25	; 0x09
     6c2:	88 87       	std	Y+8, r24	; 0x08
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 81       	ld	r18, Z
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	20 83       	st	Z, r18
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <uxListRemove>:
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	fc 01       	movw	r30, r24
     6d8:	a0 85       	ldd	r26, Z+8	; 0x08
     6da:	b1 85       	ldd	r27, Z+9	; 0x09
     6dc:	c2 81       	ldd	r28, Z+2	; 0x02
     6de:	d3 81       	ldd	r29, Z+3	; 0x03
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	9d 83       	std	Y+5, r25	; 0x05
     6e6:	8c 83       	std	Y+4, r24	; 0x04
     6e8:	c4 81       	ldd	r28, Z+4	; 0x04
     6ea:	d5 81       	ldd	r29, Z+5	; 0x05
     6ec:	82 81       	ldd	r24, Z+2	; 0x02
     6ee:	93 81       	ldd	r25, Z+3	; 0x03
     6f0:	9b 83       	std	Y+3, r25	; 0x03
     6f2:	8a 83       	std	Y+2, r24	; 0x02
     6f4:	11 96       	adiw	r26, 0x01	; 1
     6f6:	8d 91       	ld	r24, X+
     6f8:	9c 91       	ld	r25, X
     6fa:	12 97       	sbiw	r26, 0x02	; 2
     6fc:	e8 17       	cp	r30, r24
     6fe:	f9 07       	cpc	r31, r25
     700:	31 f4       	brne	.+12     	; 0x70e <uxListRemove+0x3c>
     702:	84 81       	ldd	r24, Z+4	; 0x04
     704:	95 81       	ldd	r25, Z+5	; 0x05
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	9c 93       	st	X, r25
     70a:	8e 93       	st	-X, r24
     70c:	11 97       	sbiw	r26, 0x01	; 1
     70e:	11 86       	std	Z+9, r1	; 0x09
     710:	10 86       	std	Z+8, r1	; 0x08
     712:	8c 91       	ld	r24, X
     714:	81 50       	subi	r24, 0x01	; 1
     716:	8c 93       	st	X, r24
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <pxPortInitialiseStack>:
     71e:	31 e1       	ldi	r19, 0x11	; 17
     720:	fc 01       	movw	r30, r24
     722:	30 83       	st	Z, r19
     724:	31 97       	sbiw	r30, 0x01	; 1
     726:	22 e2       	ldi	r18, 0x22	; 34
     728:	20 83       	st	Z, r18
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	a3 e3       	ldi	r26, 0x33	; 51
     72e:	a0 83       	st	Z, r26
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	60 83       	st	Z, r22
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	70 83       	st	Z, r23
     738:	31 97       	sbiw	r30, 0x01	; 1
     73a:	10 82       	st	Z, r1
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	60 e8       	ldi	r22, 0x80	; 128
     740:	60 83       	st	Z, r22
     742:	31 97       	sbiw	r30, 0x01	; 1
     744:	10 82       	st	Z, r1
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	62 e0       	ldi	r22, 0x02	; 2
     74a:	60 83       	st	Z, r22
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	63 e0       	ldi	r22, 0x03	; 3
     750:	60 83       	st	Z, r22
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	64 e0       	ldi	r22, 0x04	; 4
     756:	60 83       	st	Z, r22
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	65 e0       	ldi	r22, 0x05	; 5
     75c:	60 83       	st	Z, r22
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	66 e0       	ldi	r22, 0x06	; 6
     762:	60 83       	st	Z, r22
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	67 e0       	ldi	r22, 0x07	; 7
     768:	60 83       	st	Z, r22
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	68 e0       	ldi	r22, 0x08	; 8
     76e:	60 83       	st	Z, r22
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	69 e0       	ldi	r22, 0x09	; 9
     774:	60 83       	st	Z, r22
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	60 e1       	ldi	r22, 0x10	; 16
     77a:	60 83       	st	Z, r22
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	30 83       	st	Z, r19
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	32 e1       	ldi	r19, 0x12	; 18
     784:	30 83       	st	Z, r19
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	33 e1       	ldi	r19, 0x13	; 19
     78a:	30 83       	st	Z, r19
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	34 e1       	ldi	r19, 0x14	; 20
     790:	30 83       	st	Z, r19
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	35 e1       	ldi	r19, 0x15	; 21
     796:	30 83       	st	Z, r19
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	36 e1       	ldi	r19, 0x16	; 22
     79c:	30 83       	st	Z, r19
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	37 e1       	ldi	r19, 0x17	; 23
     7a2:	30 83       	st	Z, r19
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	38 e1       	ldi	r19, 0x18	; 24
     7a8:	30 83       	st	Z, r19
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	39 e1       	ldi	r19, 0x19	; 25
     7ae:	30 83       	st	Z, r19
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	30 e2       	ldi	r19, 0x20	; 32
     7b4:	30 83       	st	Z, r19
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	31 e2       	ldi	r19, 0x21	; 33
     7ba:	30 83       	st	Z, r19
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	20 83       	st	Z, r18
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	23 e2       	ldi	r18, 0x23	; 35
     7c4:	20 83       	st	Z, r18
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	40 83       	st	Z, r20
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	50 83       	st	Z, r21
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	26 e2       	ldi	r18, 0x26	; 38
     7d2:	20 83       	st	Z, r18
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	27 e2       	ldi	r18, 0x27	; 39
     7d8:	20 83       	st	Z, r18
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	28 e2       	ldi	r18, 0x28	; 40
     7de:	20 83       	st	Z, r18
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	29 e2       	ldi	r18, 0x29	; 41
     7e4:	20 83       	st	Z, r18
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	20 e3       	ldi	r18, 0x30	; 48
     7ea:	20 83       	st	Z, r18
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	21 e3       	ldi	r18, 0x31	; 49
     7f0:	20 83       	st	Z, r18
     7f2:	86 97       	sbiw	r24, 0x26	; 38
     7f4:	08 95       	ret

000007f6 <xPortStartScheduler>:
     7f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7fa:	85 ee       	ldi	r24, 0xE5	; 229
     7fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     800:	8b e0       	ldi	r24, 0x0B	; 11
     802:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     806:	ef e6       	ldi	r30, 0x6F	; 111
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	82 60       	ori	r24, 0x02	; 2
     80e:	80 83       	st	Z, r24
     810:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
     814:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
     818:	cd 91       	ld	r28, X+
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	dd 91       	ld	r29, X+
     81e:	de bf       	out	0x3e, r29	; 62
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	bf 91       	pop	r27
     82a:	af 91       	pop	r26
     82c:	9f 91       	pop	r25
     82e:	8f 91       	pop	r24
     830:	7f 91       	pop	r23
     832:	6f 91       	pop	r22
     834:	5f 91       	pop	r21
     836:	4f 91       	pop	r20
     838:	3f 91       	pop	r19
     83a:	2f 91       	pop	r18
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	9f 90       	pop	r9
     84e:	8f 90       	pop	r8
     850:	7f 90       	pop	r7
     852:	6f 90       	pop	r6
     854:	5f 90       	pop	r5
     856:	4f 90       	pop	r4
     858:	3f 90       	pop	r3
     85a:	2f 90       	pop	r2
     85c:	1f 90       	pop	r1
     85e:	0f 90       	pop	r0
     860:	0f be       	out	0x3f, r0	; 63
     862:	0f 90       	pop	r0
     864:	08 95       	ret
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	08 95       	ret

0000086a <vPortYield>:
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	0f 92       	push	r0
     872:	1f 92       	push	r1
     874:	11 24       	eor	r1, r1
     876:	2f 92       	push	r2
     878:	3f 92       	push	r3
     87a:	4f 92       	push	r4
     87c:	5f 92       	push	r5
     87e:	6f 92       	push	r6
     880:	7f 92       	push	r7
     882:	8f 92       	push	r8
     884:	9f 92       	push	r9
     886:	af 92       	push	r10
     888:	bf 92       	push	r11
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	2f 93       	push	r18
     898:	3f 93       	push	r19
     89a:	4f 93       	push	r20
     89c:	5f 93       	push	r21
     89e:	6f 93       	push	r22
     8a0:	7f 93       	push	r23
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	af 93       	push	r26
     8a8:	bf 93       	push	r27
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
     8b2:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
     8b6:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
     8ba:	0d b6       	in	r0, 0x3d	; 61
     8bc:	0d 92       	st	X+, r0
     8be:	0e b6       	in	r0, 0x3e	; 62
     8c0:	0d 92       	st	X+, r0
     8c2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <vTaskSwitchContext>
     8c6:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
     8ca:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
     8ce:	cd 91       	ld	r28, X+
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	dd 91       	ld	r29, X+
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	7f 90       	pop	r7
     908:	6f 90       	pop	r6
     90a:	5f 90       	pop	r5
     90c:	4f 90       	pop	r4
     90e:	3f 90       	pop	r3
     910:	2f 90       	pop	r2
     912:	1f 90       	pop	r1
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	08 95       	ret

0000091c <vPortYieldFromTick>:
     91c:	0f 92       	push	r0
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	0f 92       	push	r0
     924:	1f 92       	push	r1
     926:	11 24       	eor	r1, r1
     928:	2f 92       	push	r2
     92a:	3f 92       	push	r3
     92c:	4f 92       	push	r4
     92e:	5f 92       	push	r5
     930:	6f 92       	push	r6
     932:	7f 92       	push	r7
     934:	8f 92       	push	r8
     936:	9f 92       	push	r9
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	2f 93       	push	r18
     94a:	3f 93       	push	r19
     94c:	4f 93       	push	r20
     94e:	5f 93       	push	r21
     950:	6f 93       	push	r22
     952:	7f 93       	push	r23
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
     958:	af 93       	push	r26
     95a:	bf 93       	push	r27
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ef 93       	push	r30
     962:	ff 93       	push	r31
     964:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
     968:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
     96c:	0d b6       	in	r0, 0x3d	; 61
     96e:	0d 92       	st	X+, r0
     970:	0e b6       	in	r0, 0x3e	; 62
     972:	0d 92       	st	X+, r0
     974:	0e 94 89 0b 	call	0x1712	; 0x1712 <xTaskIncrementTick>
     978:	81 11       	cpse	r24, r1
     97a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <vTaskSwitchContext>
     97e:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
     982:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
     986:	cd 91       	ld	r28, X+
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	dd 91       	ld	r29, X+
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	bf 91       	pop	r27
     998:	af 91       	pop	r26
     99a:	9f 91       	pop	r25
     99c:	8f 91       	pop	r24
     99e:	7f 91       	pop	r23
     9a0:	6f 91       	pop	r22
     9a2:	5f 91       	pop	r21
     9a4:	4f 91       	pop	r20
     9a6:	3f 91       	pop	r19
     9a8:	2f 91       	pop	r18
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
     9ba:	9f 90       	pop	r9
     9bc:	8f 90       	pop	r8
     9be:	7f 90       	pop	r7
     9c0:	6f 90       	pop	r6
     9c2:	5f 90       	pop	r5
     9c4:	4f 90       	pop	r4
     9c6:	3f 90       	pop	r3
     9c8:	2f 90       	pop	r2
     9ca:	1f 90       	pop	r1
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	08 95       	ret

000009d4 <__vector_13>:
     9d4:	0e 94 8e 04 	call	0x91c	; 0x91c <vPortYieldFromTick>
     9d8:	18 95       	reti

000009da <pvPortMalloc>:
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
     9e0:	0e 94 83 0b 	call	0x1706	; 0x1706 <vTaskSuspendAll>
     9e4:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <pucAlignedHeap.2084>
     9e8:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <pucAlignedHeap.2084+0x1>
     9ec:	89 2b       	or	r24, r25
     9ee:	31 f4       	brne	.+12     	; 0x9fc <pvPortMalloc+0x22>
     9f0:	8b e2       	ldi	r24, 0x2B	; 43
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <pucAlignedHeap.2084+0x1>
     9f8:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <pucAlignedHeap.2084>
     9fc:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <xNextFreeByte>
     a00:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <xNextFreeByte+0x1>
     a04:	c9 01       	movw	r24, r18
     a06:	8c 0f       	add	r24, r28
     a08:	9d 1f       	adc	r25, r29
     a0a:	87 3e       	cpi	r24, 0xE7	; 231
     a0c:	43 e0       	ldi	r20, 0x03	; 3
     a0e:	94 07       	cpc	r25, r20
     a10:	70 f4       	brcc	.+28     	; 0xa2e <pvPortMalloc+0x54>
     a12:	28 17       	cp	r18, r24
     a14:	39 07       	cpc	r19, r25
     a16:	70 f4       	brcc	.+28     	; 0xa34 <pvPortMalloc+0x5a>
     a18:	c0 91 26 02 	lds	r28, 0x0226	; 0x800226 <pucAlignedHeap.2084>
     a1c:	d0 91 27 02 	lds	r29, 0x0227	; 0x800227 <pucAlignedHeap.2084+0x1>
     a20:	c2 0f       	add	r28, r18
     a22:	d3 1f       	adc	r29, r19
     a24:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <xNextFreeByte+0x1>
     a28:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <xNextFreeByte>
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <pvPortMalloc+0x5e>
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	d0 e0       	ldi	r29, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <pvPortMalloc+0x5e>
     a34:	c0 e0       	ldi	r28, 0x00	; 0
     a36:	d0 e0       	ldi	r29, 0x00	; 0
     a38:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
     a3c:	ce 01       	movw	r24, r28
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <vPortFree>:
     a44:	08 95       	ret

00000a46 <serial_new_instance>:
     a46:	4f 92       	push	r4
     a48:	5f 92       	push	r5
     a4a:	6f 92       	push	r6
     a4c:	7f 92       	push	r7
     a4e:	8f 92       	push	r8
     a50:	9f 92       	push	r9
     a52:	af 92       	push	r10
     a54:	bf 92       	push	r11
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	f8 2e       	mov	r15, r24
     a6a:	2a 01       	movw	r4, r20
     a6c:	3b 01       	movw	r6, r22
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <malloc>
     a76:	8c 01       	movw	r16, r24
     a78:	8f 2d       	mov	r24, r15
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	fc 01       	movw	r30, r24
     a82:	ee 5e       	subi	r30, 0xEE	; 238
     a84:	f9 4f       	sbci	r31, 0xF9	; 249
     a86:	11 83       	std	Z+1, r17	; 0x01
     a88:	00 83       	st	Z, r16
     a8a:	fc 01       	movw	r30, r24
     a8c:	e8 5f       	subi	r30, 0xF8	; 248
     a8e:	fe 4f       	sbci	r31, 0xFE	; 254
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	d8 01       	movw	r26, r16
     a96:	11 96       	adiw	r26, 0x01	; 1
     a98:	9c 93       	st	X, r25
     a9a:	8e 93       	st	-X, r24
     a9c:	13 96       	adiw	r26, 0x03	; 3
     a9e:	bc 92       	st	X, r11
     aa0:	ae 92       	st	-X, r10
     aa2:	12 97       	sbiw	r26, 0x02	; 2
     aa4:	15 96       	adiw	r26, 0x05	; 5
     aa6:	dc 92       	st	X, r13
     aa8:	ce 92       	st	-X, r12
     aaa:	14 97       	sbiw	r26, 0x04	; 4
     aac:	17 96       	adiw	r26, 0x07	; 7
     aae:	9c 92       	st	X, r9
     ab0:	8e 92       	st	-X, r8
     ab2:	16 97       	sbiw	r26, 0x06	; 6
     ab4:	ff b6       	in	r15, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	ed 91       	ld	r30, X+
     aba:	fc 91       	ld	r31, X
     abc:	11 97       	sbiw	r26, 0x01	; 1
     abe:	36 97       	sbiw	r30, 0x06	; 6
     ac0:	80 81       	ld	r24, Z
     ac2:	82 60       	ori	r24, 0x02	; 2
     ac4:	80 83       	st	Z, r24
     ac6:	cd 90       	ld	r12, X+
     ac8:	dc 90       	ld	r13, X
     aca:	d3 01       	movw	r26, r6
     acc:	c2 01       	movw	r24, r4
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	aa 1f       	adc	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	aa 1f       	adc	r26, r26
     adc:	bb 1f       	adc	r27, r27
     ade:	9c 01       	movw	r18, r24
     ae0:	ad 01       	movw	r20, r26
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	44 1f       	adc	r20, r20
     ae8:	55 1f       	adc	r21, r21
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	81 ee       	ldi	r24, 0xE1	; 225
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__udivmodsi4>
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	f6 01       	movw	r30, r12
     afa:	32 97       	sbiw	r30, 0x02	; 2
     afc:	20 83       	st	Z, r18
     afe:	d8 01       	movw	r26, r16
     b00:	ed 91       	ld	r30, X+
     b02:	fc 91       	ld	r31, X
     b04:	11 97       	sbiw	r26, 0x01	; 1
     b06:	35 97       	sbiw	r30, 0x05	; 5
     b08:	88 e9       	ldi	r24, 0x98	; 152
     b0a:	80 83       	st	Z, r24
     b0c:	ed 91       	ld	r30, X+
     b0e:	fc 91       	ld	r31, X
     b10:	34 97       	sbiw	r30, 0x04	; 4
     b12:	86 e0       	ldi	r24, 0x06	; 6
     b14:	80 83       	st	Z, r24
     b16:	ff be       	out	0x3f, r15	; 63
     b18:	c8 01       	movw	r24, r16
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	7f 90       	pop	r7
     b32:	6f 90       	pop	r6
     b34:	5f 90       	pop	r5
     b36:	4f 90       	pop	r4
     b38:	08 95       	ret

00000b3a <serial_send_bytes>:
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	fc 01       	movw	r30, r24
     b48:	a2 81       	ldd	r26, Z+2	; 0x02
     b4a:	b3 81       	ldd	r27, Z+3	; 0x03
     b4c:	10 97       	sbiw	r26, 0x00	; 0
     b4e:	79 f0       	breq	.+30     	; 0xb6e <serial_send_bytes+0x34>
     b50:	e4 2f       	mov	r30, r20
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	92 96       	adiw	r26, 0x22	; 34
     b56:	5c 91       	ld	r21, X
     b58:	20 e2       	ldi	r18, 0x20	; 32
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	25 1b       	sub	r18, r21
     b5e:	31 09       	sbc	r19, r1
     b60:	2e 17       	cp	r18, r30
     b62:	3f 07       	cpc	r19, r31
     b64:	1c f1       	brlt	.+70     	; 0xbac <serial_send_bytes+0x72>
     b66:	7c 01       	movw	r14, r24
     b68:	41 11       	cpse	r20, r1
     b6a:	04 c0       	rjmp	.+8      	; 0xb74 <serial_send_bytes+0x3a>
     b6c:	16 c0       	rjmp	.+44     	; 0xb9a <serial_send_bytes+0x60>
     b6e:	42 30       	cpi	r20, 0x02	; 2
     b70:	f8 f4       	brcc	.+62     	; 0xbb0 <serial_send_bytes+0x76>
     b72:	f9 cf       	rjmp	.-14     	; 0xb66 <serial_send_bytes+0x2c>
     b74:	eb 01       	movw	r28, r22
     b76:	41 50       	subi	r20, 0x01	; 1
     b78:	04 2f       	mov	r16, r20
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	0f 5f       	subi	r16, 0xFF	; 255
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	06 0f       	add	r16, r22
     b82:	17 1f       	adc	r17, r23
     b84:	69 91       	ld	r22, Y+
     b86:	d7 01       	movw	r26, r14
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	8d 91       	ld	r24, X+
     b8c:	9c 91       	ld	r25, X
     b8e:	13 97       	sbiw	r26, 0x03	; 3
     b90:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <buffer_put_item>
     b94:	c0 17       	cp	r28, r16
     b96:	d1 07       	cpc	r29, r17
     b98:	a9 f7       	brne	.-22     	; 0xb84 <serial_send_bytes+0x4a>
     b9a:	d7 01       	movw	r26, r14
     b9c:	ed 91       	ld	r30, X+
     b9e:	fc 91       	ld	r31, X
     ba0:	35 97       	sbiw	r30, 0x05	; 5
     ba2:	80 81       	ld	r24, Z
     ba4:	80 62       	ori	r24, 0x20	; 32
     ba6:	80 83       	st	Z, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <serial_send_bytes+0x78>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <serial_send_bytes+0x78>
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <__vector_20>:
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	cf 93       	push	r28
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
     be4:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <_ser_handle>
     be8:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <_ser_handle+0x1>
     bec:	30 97       	sbiw	r30, 0x00	; 0
     bee:	a1 f0       	breq	.+40     	; 0xc18 <__vector_20+0x58>
     bf0:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     bf4:	6c 2f       	mov	r22, r28
     bf6:	84 81       	ldd	r24, Z+4	; 0x04
     bf8:	95 81       	ldd	r25, Z+5	; 0x05
     bfa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <buffer_put_item>
     bfe:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <_ser_handle>
     c02:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <_ser_handle+0x1>
     c06:	dc 01       	movw	r26, r24
     c08:	16 96       	adiw	r26, 0x06	; 6
     c0a:	ed 91       	ld	r30, X+
     c0c:	fc 91       	ld	r31, X
     c0e:	17 97       	sbiw	r26, 0x07	; 7
     c10:	30 97       	sbiw	r30, 0x00	; 0
     c12:	11 f0       	breq	.+4      	; 0xc18 <__vector_20+0x58>
     c14:	6c 2f       	mov	r22, r28
     c16:	09 95       	icall
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	cf 91       	pop	r28
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_21>:
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	1f 92       	push	r1
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <_ser_handle>
     c6c:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <_ser_handle+0x1>
     c70:	30 97       	sbiw	r30, 0x00	; 0
     c72:	99 f0       	breq	.+38     	; 0xc9a <__vector_21+0x5e>
     c74:	be 01       	movw	r22, r28
     c76:	6f 5f       	subi	r22, 0xFF	; 255
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	82 81       	ldd	r24, Z+2	; 0x02
     c7c:	93 81       	ldd	r25, Z+3	; 0x03
     c7e:	0e 94 c7 02 	call	0x58e	; 0x58e <buffer_get_item>
     c82:	81 11       	cpse	r24, r1
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__vector_21+0x52>
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c8c:	0b c0       	rjmp	.+22     	; 0xca4 <__vector_21+0x68>
     c8e:	e1 ec       	ldi	r30, 0xC1	; 193
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	8f 7d       	andi	r24, 0xDF	; 223
     c96:	80 83       	st	Z, r24
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__vector_21+0x68>
     c9a:	e1 ec       	ldi	r30, 0xC1	; 193
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8f 7d       	andi	r24, 0xDF	; 223
     ca2:	80 83       	st	Z, r24
     ca4:	0f 90       	pop	r0
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <__vector_28>:
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	cf 93       	push	r28
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
     cf0:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <_ser_handle+0x2>
     cf4:	f0 91 15 06 	lds	r31, 0x0615	; 0x800615 <_ser_handle+0x3>
     cf8:	30 97       	sbiw	r30, 0x00	; 0
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <__vector_28+0x58>
     cfc:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     d00:	6c 2f       	mov	r22, r28
     d02:	84 81       	ldd	r24, Z+4	; 0x04
     d04:	95 81       	ldd	r25, Z+5	; 0x05
     d06:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <buffer_put_item>
     d0a:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <_ser_handle+0x2>
     d0e:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <_ser_handle+0x3>
     d12:	dc 01       	movw	r26, r24
     d14:	16 96       	adiw	r26, 0x06	; 6
     d16:	ed 91       	ld	r30, X+
     d18:	fc 91       	ld	r31, X
     d1a:	17 97       	sbiw	r26, 0x07	; 7
     d1c:	30 97       	sbiw	r30, 0x00	; 0
     d1e:	11 f0       	breq	.+4      	; 0xd24 <__vector_28+0x58>
     d20:	6c 2f       	mov	r22, r28
     d22:	09 95       	icall
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	cf 91       	pop	r28
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	7f 91       	pop	r23
     d34:	6f 91       	pop	r22
     d36:	5f 91       	pop	r21
     d38:	4f 91       	pop	r20
     d3a:	3f 91       	pop	r19
     d3c:	2f 91       	pop	r18
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	0f 90       	pop	r0
     d44:	1f 90       	pop	r1
     d46:	18 95       	reti

00000d48 <__vector_29>:
     d48:	1f 92       	push	r1
     d4a:	0f 92       	push	r0
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	1f 92       	push	r1
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <_ser_handle+0x2>
     d78:	f0 91 15 06 	lds	r31, 0x0615	; 0x800615 <_ser_handle+0x3>
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	99 f0       	breq	.+38     	; 0xda6 <__vector_29+0x5e>
     d80:	be 01       	movw	r22, r28
     d82:	6f 5f       	subi	r22, 0xFF	; 255
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	0e 94 c7 02 	call	0x58e	; 0x58e <buffer_get_item>
     d8e:	81 11       	cpse	r24, r1
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__vector_29+0x52>
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <__vector_29+0x68>
     d9a:	e9 ec       	ldi	r30, 0xC9	; 201
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8f 7d       	andi	r24, 0xDF	; 223
     da2:	80 83       	st	Z, r24
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__vector_29+0x68>
     da6:	e9 ec       	ldi	r30, 0xC9	; 201
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8f 7d       	andi	r24, 0xDF	; 223
     dae:	80 83       	st	Z, r24
     db0:	0f 90       	pop	r0
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <prvCopyDataToQueue>:
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
     de2:	04 2f       	mov	r16, r20
     de4:	1a 8d       	ldd	r17, Y+26	; 0x1a
     de6:	4c 8d       	ldd	r20, Y+28	; 0x1c
     de8:	41 11       	cpse	r20, r1
     dea:	0c c0       	rjmp	.+24     	; 0xe04 <prvCopyDataToQueue+0x2c>
     dec:	88 81       	ld	r24, Y
     dee:	99 81       	ldd	r25, Y+1	; 0x01
     df0:	89 2b       	or	r24, r25
     df2:	09 f0       	breq	.+2      	; 0xdf6 <prvCopyDataToQueue+0x1e>
     df4:	42 c0       	rjmp	.+132    	; 0xe7a <prvCopyDataToQueue+0xa2>
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <xTaskPriorityDisinherit>
     dfe:	1b 82       	std	Y+3, r1	; 0x03
     e00:	1a 82       	std	Y+2, r1	; 0x02
     e02:	42 c0       	rjmp	.+132    	; 0xe88 <prvCopyDataToQueue+0xb0>
     e04:	01 11       	cpse	r16, r1
     e06:	17 c0       	rjmp	.+46     	; 0xe36 <prvCopyDataToQueue+0x5e>
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	0e 94 31 10 	call	0x2062	; 0x2062 <memcpy>
     e12:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	9d 81       	ldd	r25, Y+5	; 0x05
     e18:	82 0f       	add	r24, r18
     e1a:	91 1d       	adc	r25, r1
     e1c:	9d 83       	std	Y+5, r25	; 0x05
     e1e:	8c 83       	std	Y+4, r24	; 0x04
     e20:	2a 81       	ldd	r18, Y+2	; 0x02
     e22:	3b 81       	ldd	r19, Y+3	; 0x03
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	50 f1       	brcs	.+84     	; 0xe7e <prvCopyDataToQueue+0xa6>
     e2a:	88 81       	ld	r24, Y
     e2c:	99 81       	ldd	r25, Y+1	; 0x01
     e2e:	9d 83       	std	Y+5, r25	; 0x05
     e30:	8c 83       	std	Y+4, r24	; 0x04
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	29 c0       	rjmp	.+82     	; 0xe88 <prvCopyDataToQueue+0xb0>
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	0e 94 31 10 	call	0x2062	; 0x2062 <memcpy>
     e40:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	91 95       	neg	r25
     e46:	81 95       	neg	r24
     e48:	91 09       	sbc	r25, r1
     e4a:	2e 81       	ldd	r18, Y+6	; 0x06
     e4c:	3f 81       	ldd	r19, Y+7	; 0x07
     e4e:	28 0f       	add	r18, r24
     e50:	39 1f       	adc	r19, r25
     e52:	3f 83       	std	Y+7, r19	; 0x07
     e54:	2e 83       	std	Y+6, r18	; 0x06
     e56:	48 81       	ld	r20, Y
     e58:	59 81       	ldd	r21, Y+1	; 0x01
     e5a:	24 17       	cp	r18, r20
     e5c:	35 07       	cpc	r19, r21
     e5e:	30 f4       	brcc	.+12     	; 0xe6c <prvCopyDataToQueue+0x94>
     e60:	2a 81       	ldd	r18, Y+2	; 0x02
     e62:	3b 81       	ldd	r19, Y+3	; 0x03
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	9f 83       	std	Y+7, r25	; 0x07
     e6a:	8e 83       	std	Y+6, r24	; 0x06
     e6c:	02 30       	cpi	r16, 0x02	; 2
     e6e:	49 f4       	brne	.+18     	; 0xe82 <prvCopyDataToQueue+0xaa>
     e70:	11 23       	and	r17, r17
     e72:	49 f0       	breq	.+18     	; 0xe86 <prvCopyDataToQueue+0xae>
     e74:	11 50       	subi	r17, 0x01	; 1
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	07 c0       	rjmp	.+14     	; 0xe88 <prvCopyDataToQueue+0xb0>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <prvCopyDataToQueue+0xb0>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <prvCopyDataToQueue+0xb0>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <prvCopyDataToQueue+0xb0>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	1f 5f       	subi	r17, 0xFF	; 255
     e8a:	1a 8f       	std	Y+26, r17	; 0x1a
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <prvCopyDataFromQueue>:
     e96:	fc 01       	movw	r30, r24
     e98:	44 8d       	ldd	r20, Z+28	; 0x1c
     e9a:	44 23       	and	r20, r20
     e9c:	a9 f0       	breq	.+42     	; 0xec8 <prvCopyDataFromQueue+0x32>
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	26 81       	ldd	r18, Z+6	; 0x06
     ea2:	37 81       	ldd	r19, Z+7	; 0x07
     ea4:	24 0f       	add	r18, r20
     ea6:	35 1f       	adc	r19, r21
     ea8:	37 83       	std	Z+7, r19	; 0x07
     eaa:	26 83       	std	Z+6, r18	; 0x06
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	28 17       	cp	r18, r24
     eb2:	39 07       	cpc	r19, r25
     eb4:	20 f0       	brcs	.+8      	; 0xebe <prvCopyDataFromQueue+0x28>
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	97 83       	std	Z+7, r25	; 0x07
     ebc:	86 83       	std	Z+6, r24	; 0x06
     ebe:	cb 01       	movw	r24, r22
     ec0:	66 81       	ldd	r22, Z+6	; 0x06
     ec2:	77 81       	ldd	r23, Z+7	; 0x07
     ec4:	0e 94 31 10 	call	0x2062	; 0x2062 <memcpy>
     ec8:	08 95       	ret

00000eca <prvUnlockQueue>:
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	8c 01       	movw	r16, r24
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	0f 92       	push	r0
     edc:	fc 01       	movw	r30, r24
     ede:	c6 8d       	ldd	r28, Z+30	; 0x1e
     ee0:	1c 16       	cp	r1, r28
     ee2:	ac f4       	brge	.+42     	; 0xf0e <prvUnlockQueue+0x44>
     ee4:	81 89       	ldd	r24, Z+17	; 0x11
     ee6:	81 11       	cpse	r24, r1
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <prvUnlockQueue+0x2c>
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <prvUnlockQueue+0x44>
     eec:	f8 01       	movw	r30, r16
     eee:	81 89       	ldd	r24, Z+17	; 0x11
     ef0:	81 11       	cpse	r24, r1
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <prvUnlockQueue+0x34>
     ef4:	0c c0       	rjmp	.+24     	; 0xf0e <prvUnlockQueue+0x44>
     ef6:	78 01       	movw	r14, r16
     ef8:	f1 e1       	ldi	r31, 0x11	; 17
     efa:	ef 0e       	add	r14, r31
     efc:	f1 1c       	adc	r15, r1
     efe:	c7 01       	movw	r24, r14
     f00:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xTaskRemoveFromEventList>
     f04:	81 11       	cpse	r24, r1
     f06:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <vTaskMissedYield>
     f0a:	c1 50       	subi	r28, 0x01	; 1
     f0c:	79 f7       	brne	.-34     	; 0xeec <prvUnlockQueue+0x22>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	f8 01       	movw	r30, r16
     f12:	86 8f       	std	Z+30, r24	; 0x1e
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	0f 92       	push	r0
     f1e:	c5 8d       	ldd	r28, Z+29	; 0x1d
     f20:	1c 16       	cp	r1, r28
     f22:	ac f4       	brge	.+42     	; 0xf4e <prvUnlockQueue+0x84>
     f24:	80 85       	ldd	r24, Z+8	; 0x08
     f26:	81 11       	cpse	r24, r1
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <prvUnlockQueue+0x6c>
     f2a:	11 c0       	rjmp	.+34     	; 0xf4e <prvUnlockQueue+0x84>
     f2c:	f8 01       	movw	r30, r16
     f2e:	80 85       	ldd	r24, Z+8	; 0x08
     f30:	81 11       	cpse	r24, r1
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <prvUnlockQueue+0x74>
     f34:	0c c0       	rjmp	.+24     	; 0xf4e <prvUnlockQueue+0x84>
     f36:	78 01       	movw	r14, r16
     f38:	f8 e0       	ldi	r31, 0x08	; 8
     f3a:	ef 0e       	add	r14, r31
     f3c:	f1 1c       	adc	r15, r1
     f3e:	c7 01       	movw	r24, r14
     f40:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xTaskRemoveFromEventList>
     f44:	81 11       	cpse	r24, r1
     f46:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <vTaskMissedYield>
     f4a:	c1 50       	subi	r28, 0x01	; 1
     f4c:	79 f7       	brne	.-34     	; 0xf2c <prvUnlockQueue+0x62>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	f8 01       	movw	r30, r16
     f52:	85 8f       	std	Z+29, r24	; 0x1d
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	08 95       	ret

00000f64 <xQueueGenericReset>:
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	ec 01       	movw	r28, r24
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	0f 92       	push	r0
     f70:	48 81       	ld	r20, Y
     f72:	59 81       	ldd	r21, Y+1	; 0x01
     f74:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	7b 8d       	ldd	r23, Y+27	; 0x1b
     f7a:	72 9f       	mul	r23, r18
     f7c:	c0 01       	movw	r24, r0
     f7e:	73 9f       	mul	r23, r19
     f80:	90 0d       	add	r25, r0
     f82:	11 24       	eor	r1, r1
     f84:	fa 01       	movw	r30, r20
     f86:	e8 0f       	add	r30, r24
     f88:	f9 1f       	adc	r31, r25
     f8a:	fb 83       	std	Y+3, r31	; 0x03
     f8c:	ea 83       	std	Y+2, r30	; 0x02
     f8e:	1a 8e       	std	Y+26, r1	; 0x1a
     f90:	5d 83       	std	Y+5, r21	; 0x05
     f92:	4c 83       	std	Y+4, r20	; 0x04
     f94:	82 1b       	sub	r24, r18
     f96:	93 0b       	sbc	r25, r19
     f98:	84 0f       	add	r24, r20
     f9a:	95 1f       	adc	r25, r21
     f9c:	9f 83       	std	Y+7, r25	; 0x07
     f9e:	8e 83       	std	Y+6, r24	; 0x06
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	8d 8f       	std	Y+29, r24	; 0x1d
     fa4:	8e 8f       	std	Y+30, r24	; 0x1e
     fa6:	61 11       	cpse	r22, r1
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <xQueueGenericReset+0x5e>
     faa:	88 85       	ldd	r24, Y+8	; 0x08
     fac:	88 23       	and	r24, r24
     fae:	89 f0       	breq	.+34     	; 0xfd2 <xQueueGenericReset+0x6e>
     fb0:	ce 01       	movw	r24, r28
     fb2:	08 96       	adiw	r24, 0x08	; 8
     fb4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xTaskRemoveFromEventList>
     fb8:	88 23       	and	r24, r24
     fba:	59 f0       	breq	.+22     	; 0xfd2 <xQueueGenericReset+0x6e>
     fbc:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
     fc0:	08 c0       	rjmp	.+16     	; 0xfd2 <xQueueGenericReset+0x6e>
     fc2:	ce 01       	movw	r24, r28
     fc4:	08 96       	adiw	r24, 0x08	; 8
     fc6:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
     fca:	ce 01       	movw	r24, r28
     fcc:	41 96       	adiw	r24, 0x11	; 17
     fce:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <xQueueGenericCreate>:
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	08 2f       	mov	r16, r24
     fea:	16 2f       	mov	r17, r22
     fec:	f4 2e       	mov	r15, r20
     fee:	66 23       	and	r22, r22
     ff0:	c9 f0       	breq	.+50     	; 0x1024 <xQueueGenericCreate+0x46>
     ff2:	86 9f       	mul	r24, r22
     ff4:	c0 01       	movw	r24, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	81 96       	adiw	r24, 0x21	; 33
     ffa:	0e 94 ed 04 	call	0x9da	; 0x9da <pvPortMalloc>
     ffe:	ec 01       	movw	r28, r24
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	49 f4       	brne	.+18     	; 0x1016 <xQueueGenericCreate+0x38>
    1004:	16 c0       	rjmp	.+44     	; 0x1032 <xQueueGenericCreate+0x54>
    1006:	0b 8f       	std	Y+27, r16	; 0x1b
    1008:	1c 8f       	std	Y+28, r17	; 0x1c
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 b2 07 	call	0xf64	; 0xf64 <xQueueGenericReset>
    1012:	f8 a2       	std	Y+32, r15	; 0x20
    1014:	0e c0       	rjmp	.+28     	; 0x1032 <xQueueGenericCreate+0x54>
    1016:	81 96       	adiw	r24, 0x21	; 33
    1018:	99 83       	std	Y+1, r25	; 0x01
    101a:	88 83       	st	Y, r24
    101c:	f4 cf       	rjmp	.-24     	; 0x1006 <xQueueGenericCreate+0x28>
    101e:	d9 83       	std	Y+1, r29	; 0x01
    1020:	c8 83       	st	Y, r28
    1022:	f1 cf       	rjmp	.-30     	; 0x1006 <xQueueGenericCreate+0x28>
    1024:	81 e2       	ldi	r24, 0x21	; 33
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 ed 04 	call	0x9da	; 0x9da <pvPortMalloc>
    102c:	ec 01       	movw	r28, r24
    102e:	89 2b       	or	r24, r25
    1030:	b1 f7       	brne	.-20     	; 0x101e <xQueueGenericCreate+0x40>
    1032:	ce 01       	movw	r24, r28
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	08 95       	ret

00001040 <xQueueGenericSend>:
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	00 d0       	rcall	.+0      	; 0x1058 <xQueueGenericSend+0x18>
    1058:	00 d0       	rcall	.+0      	; 0x105a <xQueueGenericSend+0x1a>
    105a:	1f 92       	push	r1
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	8c 01       	movw	r16, r24
    1062:	6b 01       	movw	r12, r22
    1064:	5d 83       	std	Y+5, r21	; 0x05
    1066:	4c 83       	std	Y+4, r20	; 0x04
    1068:	a2 2e       	mov	r10, r18
    106a:	b1 2c       	mov	r11, r1
    106c:	99 24       	eor	r9, r9
    106e:	93 94       	inc	r9
    1070:	7c 01       	movw	r14, r24
    1072:	88 e0       	ldi	r24, 0x08	; 8
    1074:	e8 0e       	add	r14, r24
    1076:	f1 1c       	adc	r15, r1
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	0f 92       	push	r0
    107e:	f8 01       	movw	r30, r16
    1080:	92 8d       	ldd	r25, Z+26	; 0x1a
    1082:	83 8d       	ldd	r24, Z+27	; 0x1b
    1084:	98 17       	cp	r25, r24
    1086:	18 f0       	brcs	.+6      	; 0x108e <xQueueGenericSend+0x4e>
    1088:	f2 e0       	ldi	r31, 0x02	; 2
    108a:	af 12       	cpse	r10, r31
    108c:	19 c0       	rjmp	.+50     	; 0x10c0 <xQueueGenericSend+0x80>
    108e:	4a 2d       	mov	r20, r10
    1090:	b6 01       	movw	r22, r12
    1092:	c8 01       	movw	r24, r16
    1094:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <prvCopyDataToQueue>
    1098:	f8 01       	movw	r30, r16
    109a:	91 89       	ldd	r25, Z+17	; 0x11
    109c:	99 23       	and	r25, r25
    109e:	49 f0       	breq	.+18     	; 0x10b2 <xQueueGenericSend+0x72>
    10a0:	c8 01       	movw	r24, r16
    10a2:	41 96       	adiw	r24, 0x11	; 17
    10a4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xTaskRemoveFromEventList>
    10a8:	88 23       	and	r24, r24
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <xQueueGenericSend+0x78>
    10ac:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <xQueueGenericSend+0x78>
    10b2:	81 11       	cpse	r24, r1
    10b4:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	50 c0       	rjmp	.+160    	; 0x1160 <xQueueGenericSend+0x120>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	89 2b       	or	r24, r25
    10c6:	21 f4       	brne	.+8      	; 0x10d0 <xQueueGenericSend+0x90>
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	48 c0       	rjmp	.+144    	; 0x1160 <xQueueGenericSend+0x120>
    10d0:	b1 10       	cpse	r11, r1
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <xQueueGenericSend+0x9e>
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vTaskSetTimeOutState>
    10dc:	b9 2c       	mov	r11, r9
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0e 94 83 0b 	call	0x1706	; 0x1706 <vTaskSuspendAll>
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	0f 92       	push	r0
    10ec:	f8 01       	movw	r30, r16
    10ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    10f0:	8f 3f       	cpi	r24, 0xFF	; 255
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <xQueueGenericSend+0xb6>
    10f4:	15 8e       	std	Z+29, r1	; 0x1d
    10f6:	f8 01       	movw	r30, r16
    10f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	09 f4       	brne	.+2      	; 0x1100 <xQueueGenericSend+0xc0>
    10fe:	16 8e       	std	Z+30, r1	; 0x1e
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	be 01       	movw	r22, r28
    1106:	6c 5f       	subi	r22, 0xFC	; 252
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	ce 01       	movw	r24, r28
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <xTaskCheckForTimeOut>
    1112:	81 11       	cpse	r24, r1
    1114:	1f c0       	rjmp	.+62     	; 0x1154 <xQueueGenericSend+0x114>
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	0f 92       	push	r0
    111c:	f8 01       	movw	r30, r16
    111e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	83 8d       	ldd	r24, Z+27	; 0x1b
    1126:	98 13       	cpse	r25, r24
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <xQueueGenericSend+0x108>
    112a:	6c 81       	ldd	r22, Y+4	; 0x04
    112c:	7d 81       	ldd	r23, Y+5	; 0x05
    112e:	c7 01       	movw	r24, r14
    1130:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <vTaskPlaceOnEventList>
    1134:	c8 01       	movw	r24, r16
    1136:	0e 94 65 07 	call	0xeca	; 0xeca <prvUnlockQueue>
    113a:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    113e:	81 11       	cpse	r24, r1
    1140:	9b cf       	rjmp	.-202    	; 0x1078 <xQueueGenericSend+0x38>
    1142:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    1146:	98 cf       	rjmp	.-208    	; 0x1078 <xQueueGenericSend+0x38>
    1148:	c8 01       	movw	r24, r16
    114a:	0e 94 65 07 	call	0xeca	; 0xeca <prvUnlockQueue>
    114e:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    1152:	92 cf       	rjmp	.-220    	; 0x1078 <xQueueGenericSend+0x38>
    1154:	c8 01       	movw	r24, r16
    1156:	0e 94 65 07 	call	0xeca	; 0xeca <prvUnlockQueue>
    115a:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	08 95       	ret

00001182 <xQueueCreateMutex>:
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	48 2f       	mov	r20, r24
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 ef 07 	call	0xfde	; 0xfde <xQueueGenericCreate>
    1190:	ec 01       	movw	r28, r24
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	61 f0       	breq	.+24     	; 0x11ae <xQueueCreateMutex+0x2c>
    1196:	1b 82       	std	Y+3, r1	; 0x03
    1198:	1a 82       	std	Y+2, r1	; 0x02
    119a:	19 82       	std	Y+1, r1	; 0x01
    119c:	18 82       	st	Y, r1
    119e:	1e 82       	std	Y+6, r1	; 0x06
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	0e 94 20 08 	call	0x1040	; 0x1040 <xQueueGenericSend>
    11ae:	ce 01       	movw	r24, r28
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <xQueueGenericSendFromISR>:
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	8a 01       	movw	r16, r20
    11c4:	fc 01       	movw	r30, r24
    11c6:	52 8d       	ldd	r21, Z+26	; 0x1a
    11c8:	33 8d       	ldd	r19, Z+27	; 0x1b
    11ca:	53 17       	cp	r21, r19
    11cc:	10 f0       	brcs	.+4      	; 0x11d2 <xQueueGenericSendFromISR+0x1c>
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	f1 f4       	brne	.+60     	; 0x120e <xQueueGenericSendFromISR+0x58>
    11d2:	42 2f       	mov	r20, r18
    11d4:	78 01       	movw	r14, r16
    11d6:	ec 01       	movw	r28, r24
    11d8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11da:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <prvCopyDataToQueue>
    11de:	1f 3f       	cpi	r17, 0xFF	; 255
    11e0:	81 f4       	brne	.+32     	; 0x1202 <xQueueGenericSendFromISR+0x4c>
    11e2:	89 89       	ldd	r24, Y+17	; 0x11
    11e4:	88 23       	and	r24, r24
    11e6:	a9 f0       	breq	.+42     	; 0x1212 <xQueueGenericSendFromISR+0x5c>
    11e8:	ce 01       	movw	r24, r28
    11ea:	41 96       	adiw	r24, 0x11	; 17
    11ec:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xTaskRemoveFromEventList>
    11f0:	88 23       	and	r24, r24
    11f2:	89 f0       	breq	.+34     	; 0x1216 <xQueueGenericSendFromISR+0x60>
    11f4:	e1 14       	cp	r14, r1
    11f6:	f1 04       	cpc	r15, r1
    11f8:	81 f0       	breq	.+32     	; 0x121a <xQueueGenericSendFromISR+0x64>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	f7 01       	movw	r30, r14
    11fe:	80 83       	st	Z, r24
    1200:	0d c0       	rjmp	.+26     	; 0x121c <xQueueGenericSendFromISR+0x66>
    1202:	ff 24       	eor	r15, r15
    1204:	f3 94       	inc	r15
    1206:	f1 0e       	add	r15, r17
    1208:	fe 8e       	std	Y+30, r15	; 0x1e
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	07 c0       	rjmp	.+14     	; 0x121c <xQueueGenericSendFromISR+0x66>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	05 c0       	rjmp	.+10     	; 0x121c <xQueueGenericSendFromISR+0x66>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	03 c0       	rjmp	.+6      	; 0x121c <xQueueGenericSendFromISR+0x66>
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	01 c0       	rjmp	.+2      	; 0x121c <xQueueGenericSendFromISR+0x66>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	08 95       	ret

0000122a <xQueueGenericReceive>:
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	00 d0       	rcall	.+0      	; 0x1244 <xQueueGenericReceive+0x1a>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <xQueueGenericReceive+0x1c>
    1246:	1f 92       	push	r1
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	8c 01       	movw	r16, r24
    124e:	5b 01       	movw	r10, r22
    1250:	5d 83       	std	Y+5, r21	; 0x05
    1252:	4c 83       	std	Y+4, r20	; 0x04
    1254:	82 2e       	mov	r8, r18
    1256:	e1 2c       	mov	r14, r1
    1258:	99 24       	eor	r9, r9
    125a:	93 94       	inc	r9
    125c:	6c 01       	movw	r12, r24
    125e:	81 e1       	ldi	r24, 0x11	; 17
    1260:	c8 0e       	add	r12, r24
    1262:	d1 1c       	adc	r13, r1
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	0f 92       	push	r0
    126a:	f8 01       	movw	r30, r16
    126c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    126e:	ff 20       	and	r15, r15
    1270:	91 f1       	breq	.+100    	; 0x12d6 <xQueueGenericReceive+0xac>
    1272:	c6 80       	ldd	r12, Z+6	; 0x06
    1274:	d7 80       	ldd	r13, Z+7	; 0x07
    1276:	b5 01       	movw	r22, r10
    1278:	c8 01       	movw	r24, r16
    127a:	0e 94 4b 07 	call	0xe96	; 0xe96 <prvCopyDataFromQueue>
    127e:	81 10       	cpse	r8, r1
    1280:	19 c0       	rjmp	.+50     	; 0x12b4 <xQueueGenericReceive+0x8a>
    1282:	fa 94       	dec	r15
    1284:	f8 01       	movw	r30, r16
    1286:	f2 8e       	std	Z+26, r15	; 0x1a
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	89 2b       	or	r24, r25
    128e:	29 f4       	brne	.+10     	; 0x129a <xQueueGenericReceive+0x70>
    1290:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <pvTaskIncrementMutexHeldCount>
    1294:	f8 01       	movw	r30, r16
    1296:	93 83       	std	Z+3, r25	; 0x03
    1298:	82 83       	std	Z+2, r24	; 0x02
    129a:	f8 01       	movw	r30, r16
    129c:	80 85       	ldd	r24, Z+8	; 0x08
    129e:	88 23       	and	r24, r24
    12a0:	b1 f0       	breq	.+44     	; 0x12ce <xQueueGenericReceive+0xa4>
    12a2:	c8 01       	movw	r24, r16
    12a4:	08 96       	adiw	r24, 0x08	; 8
    12a6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xTaskRemoveFromEventList>
    12aa:	88 23       	and	r24, r24
    12ac:	81 f0       	breq	.+32     	; 0x12ce <xQueueGenericReceive+0xa4>
    12ae:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    12b2:	0d c0       	rjmp	.+26     	; 0x12ce <xQueueGenericReceive+0xa4>
    12b4:	f8 01       	movw	r30, r16
    12b6:	d7 82       	std	Z+7, r13	; 0x07
    12b8:	c6 82       	std	Z+6, r12	; 0x06
    12ba:	81 89       	ldd	r24, Z+17	; 0x11
    12bc:	88 23       	and	r24, r24
    12be:	39 f0       	breq	.+14     	; 0x12ce <xQueueGenericReceive+0xa4>
    12c0:	c8 01       	movw	r24, r16
    12c2:	41 96       	adiw	r24, 0x11	; 17
    12c4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xTaskRemoveFromEventList>
    12c8:	81 11       	cpse	r24, r1
    12ca:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	64 c0       	rjmp	.+200    	; 0x139e <xQueueGenericReceive+0x174>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	89 2b       	or	r24, r25
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <xQueueGenericReceive+0xbc>
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	5c c0       	rjmp	.+184    	; 0x139e <xQueueGenericReceive+0x174>
    12e6:	e1 10       	cpse	r14, r1
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <xQueueGenericReceive+0xca>
    12ea:	ce 01       	movw	r24, r28
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vTaskSetTimeOutState>
    12f2:	e9 2c       	mov	r14, r9
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	0e 94 83 0b 	call	0x1706	; 0x1706 <vTaskSuspendAll>
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	0f 92       	push	r0
    1302:	f8 01       	movw	r30, r16
    1304:	85 8d       	ldd	r24, Z+29	; 0x1d
    1306:	8f 3f       	cpi	r24, 0xFF	; 255
    1308:	09 f4       	brne	.+2      	; 0x130c <xQueueGenericReceive+0xe2>
    130a:	15 8e       	std	Z+29, r1	; 0x1d
    130c:	f8 01       	movw	r30, r16
    130e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1310:	8f 3f       	cpi	r24, 0xFF	; 255
    1312:	09 f4       	brne	.+2      	; 0x1316 <xQueueGenericReceive+0xec>
    1314:	16 8e       	std	Z+30, r1	; 0x1e
    1316:	0f 90       	pop	r0
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	be 01       	movw	r22, r28
    131c:	6c 5f       	subi	r22, 0xFC	; 252
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	ce 01       	movw	r24, r28
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <xTaskCheckForTimeOut>
    1328:	81 11       	cpse	r24, r1
    132a:	2b c0       	rjmp	.+86     	; 0x1382 <xQueueGenericReceive+0x158>
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	0f 92       	push	r0
    1332:	f8 01       	movw	r30, r16
    1334:	82 8d       	ldd	r24, Z+26	; 0x1a
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	81 11       	cpse	r24, r1
    133c:	1c c0       	rjmp	.+56     	; 0x1376 <xQueueGenericReceive+0x14c>
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	89 2b       	or	r24, r25
    1344:	49 f4       	brne	.+18     	; 0x1358 <xQueueGenericReceive+0x12e>
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	0f 92       	push	r0
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vTaskPriorityInherit>
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	6c 81       	ldd	r22, Y+4	; 0x04
    135a:	7d 81       	ldd	r23, Y+5	; 0x05
    135c:	c6 01       	movw	r24, r12
    135e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <vTaskPlaceOnEventList>
    1362:	c8 01       	movw	r24, r16
    1364:	0e 94 65 07 	call	0xeca	; 0xeca <prvUnlockQueue>
    1368:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    136c:	81 11       	cpse	r24, r1
    136e:	7a cf       	rjmp	.-268    	; 0x1264 <xQueueGenericReceive+0x3a>
    1370:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    1374:	77 cf       	rjmp	.-274    	; 0x1264 <xQueueGenericReceive+0x3a>
    1376:	c8 01       	movw	r24, r16
    1378:	0e 94 65 07 	call	0xeca	; 0xeca <prvUnlockQueue>
    137c:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    1380:	71 cf       	rjmp	.-286    	; 0x1264 <xQueueGenericReceive+0x3a>
    1382:	c8 01       	movw	r24, r16
    1384:	0e 94 65 07 	call	0xeca	; 0xeca <prvUnlockQueue>
    1388:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	0f 92       	push	r0
    1392:	f8 01       	movw	r30, r16
    1394:	82 8d       	ldd	r24, Z+26	; 0x1a
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	81 11       	cpse	r24, r1
    139c:	63 cf       	rjmp	.-314    	; 0x1264 <xQueueGenericReceive+0x3a>
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	9f 90       	pop	r9
    13be:	8f 90       	pop	r8
    13c0:	08 95       	ret

000013c2 <prvResetNextTaskUnblockTime>:
    13c2:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <pxDelayedTaskList>
    13c6:	f0 91 3a 06 	lds	r31, 0x063A	; 0x80063a <pxDelayedTaskList+0x1>
    13ca:	80 81       	ld	r24, Z
    13cc:	81 11       	cpse	r24, r1
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <prvResetNextTaskUnblockTime+0x1c>
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <xNextTaskUnblockTime+0x1>
    13d8:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <xNextTaskUnblockTime>
    13dc:	08 95       	ret
    13de:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <pxDelayedTaskList>
    13e2:	f0 91 3a 06 	lds	r31, 0x063A	; 0x80063a <pxDelayedTaskList+0x1>
    13e6:	05 80       	ldd	r0, Z+5	; 0x05
    13e8:	f6 81       	ldd	r31, Z+6	; 0x06
    13ea:	e0 2d       	mov	r30, r0
    13ec:	06 80       	ldd	r0, Z+6	; 0x06
    13ee:	f7 81       	ldd	r31, Z+7	; 0x07
    13f0:	e0 2d       	mov	r30, r0
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <xNextTaskUnblockTime+0x1>
    13fa:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <xNextTaskUnblockTime>
    13fe:	08 95       	ret

00001400 <prvAddCurrentTaskToDelayedList>:
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	ec 01       	movw	r28, r24
    140a:	00 91 21 06 	lds	r16, 0x0621	; 0x800621 <xTickCount>
    140e:	10 91 22 06 	lds	r17, 0x0622	; 0x800622 <xTickCount+0x1>
    1412:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <pxCurrentTCB>
    1416:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    141a:	02 96       	adiw	r24, 0x02	; 2
    141c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    1420:	c0 0f       	add	r28, r16
    1422:	d1 1f       	adc	r29, r17
    1424:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1428:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    142c:	d3 83       	std	Z+3, r29	; 0x03
    142e:	c2 83       	std	Z+2, r28	; 0x02
    1430:	c0 17       	cp	r28, r16
    1432:	d1 07       	cpc	r29, r17
    1434:	68 f4       	brcc	.+26     	; 0x1450 <prvAddCurrentTaskToDelayedList+0x50>
    1436:	60 91 71 06 	lds	r22, 0x0671	; 0x800671 <pxCurrentTCB>
    143a:	70 91 72 06 	lds	r23, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    143e:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <pxOverflowDelayedTaskList>
    1442:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <pxOverflowDelayedTaskList+0x1>
    1446:	6e 5f       	subi	r22, 0xFE	; 254
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	0e 94 38 03 	call	0x670	; 0x670 <vListInsert>
    144e:	17 c0       	rjmp	.+46     	; 0x147e <prvAddCurrentTaskToDelayedList+0x7e>
    1450:	60 91 71 06 	lds	r22, 0x0671	; 0x800671 <pxCurrentTCB>
    1454:	70 91 72 06 	lds	r23, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1458:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <pxDelayedTaskList>
    145c:	90 91 3a 06 	lds	r25, 0x063A	; 0x80063a <pxDelayedTaskList+0x1>
    1460:	6e 5f       	subi	r22, 0xFE	; 254
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	0e 94 38 03 	call	0x670	; 0x670 <vListInsert>
    1468:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <xNextTaskUnblockTime>
    146c:	90 91 1a 06 	lds	r25, 0x061A	; 0x80061a <xNextTaskUnblockTime+0x1>
    1470:	c8 17       	cp	r28, r24
    1472:	d9 07       	cpc	r29, r25
    1474:	20 f4       	brcc	.+8      	; 0x147e <prvAddCurrentTaskToDelayedList+0x7e>
    1476:	d0 93 1a 06 	sts	0x061A, r29	; 0x80061a <xNextTaskUnblockTime+0x1>
    147a:	c0 93 19 06 	sts	0x0619, r28	; 0x800619 <xNextTaskUnblockTime>
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <xTaskCreate>:
    1488:	4f 92       	push	r4
    148a:	5f 92       	push	r5
    148c:	6f 92       	push	r6
    148e:	7f 92       	push	r7
    1490:	8f 92       	push	r8
    1492:	9f 92       	push	r9
    1494:	af 92       	push	r10
    1496:	bf 92       	push	r11
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	4c 01       	movw	r8, r24
    14a8:	6b 01       	movw	r12, r22
    14aa:	5a 01       	movw	r10, r20
    14ac:	29 01       	movw	r4, r18
    14ae:	ca 01       	movw	r24, r20
    14b0:	0e 94 ed 04 	call	0x9da	; 0x9da <pvPortMalloc>
    14b4:	3c 01       	movw	r6, r24
    14b6:	89 2b       	or	r24, r25
    14b8:	09 f4       	brne	.+2      	; 0x14bc <xTaskCreate+0x34>
    14ba:	ea c0       	rjmp	.+468    	; 0x1690 <xTaskCreate+0x208>
    14bc:	8c e2       	ldi	r24, 0x2C	; 44
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 ed 04 	call	0x9da	; 0x9da <pvPortMalloc>
    14c4:	ec 01       	movw	r28, r24
    14c6:	89 2b       	or	r24, r25
    14c8:	b1 f0       	breq	.+44     	; 0x14f6 <xTaskCreate+0x6e>
    14ca:	78 8e       	std	Y+24, r7	; 0x18
    14cc:	6f 8a       	std	Y+23, r6	; 0x17
    14ce:	a5 01       	movw	r20, r10
    14d0:	65 ea       	ldi	r22, 0xA5	; 165
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	c3 01       	movw	r24, r6
    14d6:	0e 94 3a 10 	call	0x2074	; 0x2074 <memset>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	a8 1a       	sub	r10, r24
    14de:	b1 08       	sbc	r11, r1
    14e0:	8f 89       	ldd	r24, Y+23	; 0x17
    14e2:	98 8d       	ldd	r25, Y+24	; 0x18
    14e4:	a8 0e       	add	r10, r24
    14e6:	b9 1e       	adc	r11, r25
    14e8:	d6 01       	movw	r26, r12
    14ea:	8c 91       	ld	r24, X
    14ec:	89 8f       	std	Y+25, r24	; 0x19
    14ee:	8c 91       	ld	r24, X
    14f0:	81 11       	cpse	r24, r1
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <xTaskCreate+0x76>
    14f4:	18 c0       	rjmp	.+48     	; 0x1526 <xTaskCreate+0x9e>
    14f6:	c3 01       	movw	r24, r6
    14f8:	0e 94 22 05 	call	0xa44	; 0xa44 <vPortFree>
    14fc:	c9 c0       	rjmp	.+402    	; 0x1690 <xTaskCreate+0x208>
    14fe:	ae 01       	movw	r20, r28
    1500:	46 5e       	subi	r20, 0xE6	; 230
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    1504:	f6 01       	movw	r30, r12
    1506:	31 96       	adiw	r30, 0x01	; 1
    1508:	b8 e0       	ldi	r27, 0x08	; 8
    150a:	cb 0e       	add	r12, r27
    150c:	d1 1c       	adc	r13, r1
    150e:	cf 01       	movw	r24, r30
    1510:	21 91       	ld	r18, Z+
    1512:	da 01       	movw	r26, r20
    1514:	2d 93       	st	X+, r18
    1516:	ad 01       	movw	r20, r26
    1518:	dc 01       	movw	r26, r24
    151a:	8c 91       	ld	r24, X
    151c:	88 23       	and	r24, r24
    151e:	19 f0       	breq	.+6      	; 0x1526 <xTaskCreate+0x9e>
    1520:	ec 15       	cp	r30, r12
    1522:	fd 05       	cpc	r31, r13
    1524:	a1 f7       	brne	.-24     	; 0x150e <xTaskCreate+0x86>
    1526:	18 a2       	std	Y+32, r1	; 0x20
    1528:	04 30       	cpi	r16, 0x04	; 4
    152a:	08 f0       	brcs	.+2      	; 0x152e <xTaskCreate+0xa6>
    152c:	03 e0       	ldi	r16, 0x03	; 3
    152e:	0e 8b       	std	Y+22, r16	; 0x16
    1530:	0b a3       	std	Y+35, r16	; 0x23
    1532:	1c a2       	std	Y+36, r1	; 0x24
    1534:	6e 01       	movw	r12, r28
    1536:	b2 e0       	ldi	r27, 0x02	; 2
    1538:	cb 0e       	add	r12, r27
    153a:	d1 1c       	adc	r13, r1
    153c:	c6 01       	movw	r24, r12
    153e:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialiseItem>
    1542:	ce 01       	movw	r24, r28
    1544:	0c 96       	adiw	r24, 0x0c	; 12
    1546:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialiseItem>
    154a:	d9 87       	std	Y+9, r29	; 0x09
    154c:	c8 87       	std	Y+8, r28	; 0x08
    154e:	84 e0       	ldi	r24, 0x04	; 4
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	80 1b       	sub	r24, r16
    1554:	91 09       	sbc	r25, r1
    1556:	9d 87       	std	Y+13, r25	; 0x0d
    1558:	8c 87       	std	Y+12, r24	; 0x0c
    155a:	db 8b       	std	Y+19, r29	; 0x13
    155c:	ca 8b       	std	Y+18, r28	; 0x12
    155e:	1e a2       	std	Y+38, r1	; 0x26
    1560:	1d a2       	std	Y+37, r1	; 0x25
    1562:	1f a2       	std	Y+39, r1	; 0x27
    1564:	18 a6       	std	Y+40, r1	; 0x28
    1566:	19 a6       	std	Y+41, r1	; 0x29
    1568:	1a a6       	std	Y+42, r1	; 0x2a
    156a:	1b a6       	std	Y+43, r1	; 0x2b
    156c:	a2 01       	movw	r20, r4
    156e:	b4 01       	movw	r22, r8
    1570:	c5 01       	movw	r24, r10
    1572:	0e 94 8f 03 	call	0x71e	; 0x71e <pxPortInitialiseStack>
    1576:	99 83       	std	Y+1, r25	; 0x01
    1578:	88 83       	st	Y, r24
    157a:	e1 14       	cp	r14, r1
    157c:	f1 04       	cpc	r15, r1
    157e:	19 f0       	breq	.+6      	; 0x1586 <xTaskCreate+0xfe>
    1580:	f7 01       	movw	r30, r14
    1582:	d1 83       	std	Z+1, r29	; 0x01
    1584:	c0 83       	st	Z, r28
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	0f 92       	push	r0
    158c:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <uxCurrentNumberOfTasks>
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <uxCurrentNumberOfTasks>
    1596:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <pxCurrentTCB>
    159a:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    159e:	89 2b       	or	r24, r25
    15a0:	a9 f5       	brne	.+106    	; 0x160c <xTaskCreate+0x184>
    15a2:	d0 93 72 06 	sts	0x0672, r29	; 0x800672 <pxCurrentTCB+0x1>
    15a6:	c0 93 71 06 	sts	0x0671, r28	; 0x800671 <pxCurrentTCB>
    15aa:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <uxCurrentNumberOfTasks>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	e9 f5       	brne	.+122    	; 0x162c <xTaskCreate+0x1a4>
    15b2:	8d e4       	ldi	r24, 0x4D	; 77
    15b4:	96 e0       	ldi	r25, 0x06	; 6
    15b6:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15ba:	86 e5       	ldi	r24, 0x56	; 86
    15bc:	96 e0       	ldi	r25, 0x06	; 6
    15be:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15c2:	8f e5       	ldi	r24, 0x5F	; 95
    15c4:	96 e0       	ldi	r25, 0x06	; 6
    15c6:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15ca:	88 e6       	ldi	r24, 0x68	; 104
    15cc:	96 e0       	ldi	r25, 0x06	; 6
    15ce:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15d2:	84 e4       	ldi	r24, 0x44	; 68
    15d4:	96 e0       	ldi	r25, 0x06	; 6
    15d6:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15da:	8b e3       	ldi	r24, 0x3B	; 59
    15dc:	96 e0       	ldi	r25, 0x06	; 6
    15de:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15e2:	8e e2       	ldi	r24, 0x2E	; 46
    15e4:	96 e0       	ldi	r25, 0x06	; 6
    15e6:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15ea:	85 e2       	ldi	r24, 0x25	; 37
    15ec:	96 e0       	ldi	r25, 0x06	; 6
    15ee:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    15f2:	84 e4       	ldi	r24, 0x44	; 68
    15f4:	96 e0       	ldi	r25, 0x06	; 6
    15f6:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <pxDelayedTaskList+0x1>
    15fa:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <pxDelayedTaskList>
    15fe:	8b e3       	ldi	r24, 0x3B	; 59
    1600:	96 e0       	ldi	r25, 0x06	; 6
    1602:	90 93 38 06 	sts	0x0638, r25	; 0x800638 <pxOverflowDelayedTaskList+0x1>
    1606:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <pxOverflowDelayedTaskList>
    160a:	10 c0       	rjmp	.+32     	; 0x162c <xTaskCreate+0x1a4>
    160c:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <xSchedulerRunning>
    1610:	81 11       	cpse	r24, r1
    1612:	0c c0       	rjmp	.+24     	; 0x162c <xTaskCreate+0x1a4>
    1614:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1618:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    161c:	96 89       	ldd	r25, Z+22	; 0x16
    161e:	8e 89       	ldd	r24, Y+22	; 0x16
    1620:	89 17       	cp	r24, r25
    1622:	20 f0       	brcs	.+8      	; 0x162c <xTaskCreate+0x1a4>
    1624:	d0 93 72 06 	sts	0x0672, r29	; 0x800672 <pxCurrentTCB+0x1>
    1628:	c0 93 71 06 	sts	0x0671, r28	; 0x800671 <pxCurrentTCB>
    162c:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <uxTaskNumber>
    1630:	8f 5f       	subi	r24, 0xFF	; 255
    1632:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <uxTaskNumber>
    1636:	89 a3       	std	Y+33, r24	; 0x21
    1638:	8e 89       	ldd	r24, Y+22	; 0x16
    163a:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <uxTopReadyPriority>
    163e:	98 17       	cp	r25, r24
    1640:	10 f4       	brcc	.+4      	; 0x1646 <xTaskCreate+0x1be>
    1642:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <uxTopReadyPriority>
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9c 01       	movw	r18, r24
    164a:	22 0f       	add	r18, r18
    164c:	33 1f       	adc	r19, r19
    164e:	22 0f       	add	r18, r18
    1650:	33 1f       	adc	r19, r19
    1652:	22 0f       	add	r18, r18
    1654:	33 1f       	adc	r19, r19
    1656:	82 0f       	add	r24, r18
    1658:	93 1f       	adc	r25, r19
    165a:	b6 01       	movw	r22, r12
    165c:	83 5b       	subi	r24, 0xB3	; 179
    165e:	99 4f       	sbci	r25, 0xF9	; 249
    1660:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <xSchedulerRunning>
    166c:	88 23       	and	r24, r24
    166e:	61 f0       	breq	.+24     	; 0x1688 <xTaskCreate+0x200>
    1670:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1674:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1678:	96 89       	ldd	r25, Z+22	; 0x16
    167a:	8e 89       	ldd	r24, Y+22	; 0x16
    167c:	98 17       	cp	r25, r24
    167e:	30 f4       	brcc	.+12     	; 0x168c <xTaskCreate+0x204>
    1680:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <xTaskCreate+0x20a>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <xTaskCreate+0x20a>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <xTaskCreate+0x20a>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	cf 90       	pop	r12
    16a0:	bf 90       	pop	r11
    16a2:	af 90       	pop	r10
    16a4:	9f 90       	pop	r9
    16a6:	8f 90       	pop	r8
    16a8:	7f 90       	pop	r7
    16aa:	6f 90       	pop	r6
    16ac:	5f 90       	pop	r5
    16ae:	4f 90       	pop	r4
    16b0:	08 95       	ret

000016b2 <vTaskStartScheduler>:
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	0f 2e       	mov	r0, r31
    16ba:	f7 e1       	ldi	r31, 0x17	; 23
    16bc:	ef 2e       	mov	r14, r31
    16be:	f6 e0       	ldi	r31, 0x06	; 6
    16c0:	ff 2e       	mov	r15, r31
    16c2:	f0 2d       	mov	r31, r0
    16c4:	00 e0       	ldi	r16, 0x00	; 0
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	45 e5       	ldi	r20, 0x55	; 85
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	6d ec       	ldi	r22, 0xCD	; 205
    16d0:	71 e0       	ldi	r23, 0x01	; 1
    16d2:	87 ed       	ldi	r24, 0xD7	; 215
    16d4:	9c e0       	ldi	r25, 0x0C	; 12
    16d6:	0e 94 44 0a 	call	0x1488	; 0x1488 <xTaskCreate>
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	81 f4       	brne	.+32     	; 0x16fe <vTaskStartScheduler+0x4c>
    16de:	f8 94       	cli
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	9f ef       	ldi	r25, 0xFF	; 255
    16e4:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <xNextTaskUnblockTime+0x1>
    16e8:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <xNextTaskUnblockTime>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <xSchedulerRunning>
    16f2:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <xTickCount+0x1>
    16f6:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <xTickCount>
    16fa:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <xPortStartScheduler>
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	08 95       	ret

00001706 <vTaskSuspendAll>:
    1706:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <uxSchedulerSuspended>
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <uxSchedulerSuspended>
    1710:	08 95       	ret

00001712 <xTaskIncrementTick>:
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <uxSchedulerSuspended>
    1726:	81 11       	cpse	r24, r1
    1728:	99 c0       	rjmp	.+306    	; 0x185c <xTaskIncrementTick+0x14a>
    172a:	e0 90 21 06 	lds	r14, 0x0621	; 0x800621 <xTickCount>
    172e:	f0 90 22 06 	lds	r15, 0x0622	; 0x800622 <xTickCount+0x1>
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	e8 1a       	sub	r14, r24
    1736:	f8 0a       	sbc	r15, r24
    1738:	f0 92 22 06 	sts	0x0622, r15	; 0x800622 <xTickCount+0x1>
    173c:	e0 92 21 06 	sts	0x0621, r14	; 0x800621 <xTickCount>
    1740:	e1 14       	cp	r14, r1
    1742:	f1 04       	cpc	r15, r1
    1744:	b9 f4       	brne	.+46     	; 0x1774 <xTaskIncrementTick+0x62>
    1746:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <pxDelayedTaskList>
    174a:	90 91 3a 06 	lds	r25, 0x063A	; 0x80063a <pxDelayedTaskList+0x1>
    174e:	20 91 37 06 	lds	r18, 0x0637	; 0x800637 <pxOverflowDelayedTaskList>
    1752:	30 91 38 06 	lds	r19, 0x0638	; 0x800638 <pxOverflowDelayedTaskList+0x1>
    1756:	30 93 3a 06 	sts	0x063A, r19	; 0x80063a <pxDelayedTaskList+0x1>
    175a:	20 93 39 06 	sts	0x0639, r18	; 0x800639 <pxDelayedTaskList>
    175e:	90 93 38 06 	sts	0x0638, r25	; 0x800638 <pxOverflowDelayedTaskList+0x1>
    1762:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <pxOverflowDelayedTaskList>
    1766:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <xNumOfOverflows>
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <xNumOfOverflows>
    1770:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <prvResetNextTaskUnblockTime>
    1774:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <xNextTaskUnblockTime>
    1778:	90 91 1a 06 	lds	r25, 0x061A	; 0x80061a <xNextTaskUnblockTime+0x1>
    177c:	e8 16       	cp	r14, r24
    177e:	f9 06       	cpc	r15, r25
    1780:	10 f4       	brcc	.+4      	; 0x1786 <xTaskIncrementTick+0x74>
    1782:	d1 2c       	mov	r13, r1
    1784:	53 c0       	rjmp	.+166    	; 0x182c <xTaskIncrementTick+0x11a>
    1786:	d1 2c       	mov	r13, r1
    1788:	cc 24       	eor	r12, r12
    178a:	c3 94       	inc	r12
    178c:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <pxDelayedTaskList>
    1790:	f0 91 3a 06 	lds	r31, 0x063A	; 0x80063a <pxDelayedTaskList+0x1>
    1794:	80 81       	ld	r24, Z
    1796:	81 11       	cpse	r24, r1
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <xTaskIncrementTick+0x96>
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	9f ef       	ldi	r25, 0xFF	; 255
    179e:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <xNextTaskUnblockTime+0x1>
    17a2:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <xNextTaskUnblockTime>
    17a6:	42 c0       	rjmp	.+132    	; 0x182c <xTaskIncrementTick+0x11a>
    17a8:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <pxDelayedTaskList>
    17ac:	f0 91 3a 06 	lds	r31, 0x063A	; 0x80063a <pxDelayedTaskList+0x1>
    17b0:	05 80       	ldd	r0, Z+5	; 0x05
    17b2:	f6 81       	ldd	r31, Z+6	; 0x06
    17b4:	e0 2d       	mov	r30, r0
    17b6:	c6 81       	ldd	r28, Z+6	; 0x06
    17b8:	d7 81       	ldd	r29, Z+7	; 0x07
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	e8 16       	cp	r14, r24
    17c0:	f9 06       	cpc	r15, r25
    17c2:	28 f4       	brcc	.+10     	; 0x17ce <xTaskIncrementTick+0xbc>
    17c4:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <xNextTaskUnblockTime+0x1>
    17c8:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <xNextTaskUnblockTime>
    17cc:	2f c0       	rjmp	.+94     	; 0x182c <xTaskIncrementTick+0x11a>
    17ce:	8e 01       	movw	r16, r28
    17d0:	0e 5f       	subi	r16, 0xFE	; 254
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
    17d4:	c8 01       	movw	r24, r16
    17d6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    17da:	8c 89       	ldd	r24, Y+20	; 0x14
    17dc:	9d 89       	ldd	r25, Y+21	; 0x15
    17de:	89 2b       	or	r24, r25
    17e0:	21 f0       	breq	.+8      	; 0x17ea <xTaskIncrementTick+0xd8>
    17e2:	ce 01       	movw	r24, r28
    17e4:	0c 96       	adiw	r24, 0x0c	; 12
    17e6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    17ea:	8e 89       	ldd	r24, Y+22	; 0x16
    17ec:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <uxTopReadyPriority>
    17f0:	98 17       	cp	r25, r24
    17f2:	10 f4       	brcc	.+4      	; 0x17f8 <xTaskIncrementTick+0xe6>
    17f4:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <uxTopReadyPriority>
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 01       	movw	r18, r24
    17fc:	22 0f       	add	r18, r18
    17fe:	33 1f       	adc	r19, r19
    1800:	22 0f       	add	r18, r18
    1802:	33 1f       	adc	r19, r19
    1804:	22 0f       	add	r18, r18
    1806:	33 1f       	adc	r19, r19
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	b8 01       	movw	r22, r16
    180e:	83 5b       	subi	r24, 0xB3	; 179
    1810:	99 4f       	sbci	r25, 0xF9	; 249
    1812:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
    1816:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    181a:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    181e:	9e 89       	ldd	r25, Y+22	; 0x16
    1820:	86 89       	ldd	r24, Z+22	; 0x16
    1822:	98 17       	cp	r25, r24
    1824:	08 f4       	brcc	.+2      	; 0x1828 <xTaskIncrementTick+0x116>
    1826:	b2 cf       	rjmp	.-156    	; 0x178c <xTaskIncrementTick+0x7a>
    1828:	dc 2c       	mov	r13, r12
    182a:	b0 cf       	rjmp	.-160    	; 0x178c <xTaskIncrementTick+0x7a>
    182c:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1830:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1834:	86 89       	ldd	r24, Z+22	; 0x16
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	8e 0f       	add	r24, r30
    1848:	9f 1f       	adc	r25, r31
    184a:	fc 01       	movw	r30, r24
    184c:	e3 5b       	subi	r30, 0xB3	; 179
    184e:	f9 4f       	sbci	r31, 0xF9	; 249
    1850:	80 81       	ld	r24, Z
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	48 f0       	brcs	.+18     	; 0x1868 <xTaskIncrementTick+0x156>
    1856:	dd 24       	eor	r13, r13
    1858:	d3 94       	inc	r13
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <xTaskIncrementTick+0x156>
    185c:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <uxPendedTicks>
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <uxPendedTicks>
    1866:	d1 2c       	mov	r13, r1
    1868:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <xYieldPending>
    186c:	88 23       	and	r24, r24
    186e:	11 f0       	breq	.+4      	; 0x1874 <xTaskIncrementTick+0x162>
    1870:	dd 24       	eor	r13, r13
    1872:	d3 94       	inc	r13
    1874:	8d 2d       	mov	r24, r13
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	08 95       	ret

00001888 <xTaskResumeAll>:
    1888:	df 92       	push	r13
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	0f 92       	push	r0
    189c:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <uxSchedulerSuspended>
    18a0:	81 50       	subi	r24, 0x01	; 1
    18a2:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <uxSchedulerSuspended>
    18a6:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <uxSchedulerSuspended>
    18aa:	81 11       	cpse	r24, r1
    18ac:	5f c0       	rjmp	.+190    	; 0x196c <xTaskResumeAll+0xe4>
    18ae:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <uxCurrentNumberOfTasks>
    18b2:	81 11       	cpse	r24, r1
    18b4:	33 c0       	rjmp	.+102    	; 0x191c <xTaskResumeAll+0x94>
    18b6:	5d c0       	rjmp	.+186    	; 0x1972 <xTaskResumeAll+0xea>
    18b8:	d7 01       	movw	r26, r14
    18ba:	15 96       	adiw	r26, 0x05	; 5
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	16 97       	sbiw	r26, 0x06	; 6
    18c2:	c6 81       	ldd	r28, Z+6	; 0x06
    18c4:	d7 81       	ldd	r29, Z+7	; 0x07
    18c6:	ce 01       	movw	r24, r28
    18c8:	0c 96       	adiw	r24, 0x0c	; 12
    18ca:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    18ce:	8e 01       	movw	r16, r28
    18d0:	0e 5f       	subi	r16, 0xFE	; 254
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	c8 01       	movw	r24, r16
    18d6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    18da:	8e 89       	ldd	r24, Y+22	; 0x16
    18dc:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <uxTopReadyPriority>
    18e0:	98 17       	cp	r25, r24
    18e2:	10 f4       	brcc	.+4      	; 0x18e8 <xTaskResumeAll+0x60>
    18e4:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <uxTopReadyPriority>
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9c 01       	movw	r18, r24
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	22 0f       	add	r18, r18
    18f2:	33 1f       	adc	r19, r19
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	82 0f       	add	r24, r18
    18fa:	93 1f       	adc	r25, r19
    18fc:	b8 01       	movw	r22, r16
    18fe:	83 5b       	subi	r24, 0xB3	; 179
    1900:	99 4f       	sbci	r25, 0xF9	; 249
    1902:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
    1906:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    190a:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    190e:	9e 89       	ldd	r25, Y+22	; 0x16
    1910:	86 89       	ldd	r24, Z+22	; 0x16
    1912:	98 17       	cp	r25, r24
    1914:	68 f0       	brcs	.+26     	; 0x1930 <xTaskResumeAll+0xa8>
    1916:	d0 92 1d 06 	sts	0x061D, r13	; 0x80061d <xYieldPending>
    191a:	0a c0       	rjmp	.+20     	; 0x1930 <xTaskResumeAll+0xa8>
    191c:	c0 e0       	ldi	r28, 0x00	; 0
    191e:	d0 e0       	ldi	r29, 0x00	; 0
    1920:	0f 2e       	mov	r0, r31
    1922:	fe e2       	ldi	r31, 0x2E	; 46
    1924:	ef 2e       	mov	r14, r31
    1926:	f6 e0       	ldi	r31, 0x06	; 6
    1928:	ff 2e       	mov	r15, r31
    192a:	f0 2d       	mov	r31, r0
    192c:	dd 24       	eor	r13, r13
    192e:	d3 94       	inc	r13
    1930:	f7 01       	movw	r30, r14
    1932:	80 81       	ld	r24, Z
    1934:	81 11       	cpse	r24, r1
    1936:	c0 cf       	rjmp	.-128    	; 0x18b8 <xTaskResumeAll+0x30>
    1938:	cd 2b       	or	r28, r29
    193a:	11 f0       	breq	.+4      	; 0x1940 <xTaskResumeAll+0xb8>
    193c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <prvResetNextTaskUnblockTime>
    1940:	c0 91 1e 06 	lds	r28, 0x061E	; 0x80061e <uxPendedTicks>
    1944:	cc 23       	and	r28, r28
    1946:	51 f0       	breq	.+20     	; 0x195c <xTaskResumeAll+0xd4>
    1948:	d1 e0       	ldi	r29, 0x01	; 1
    194a:	0e 94 89 0b 	call	0x1712	; 0x1712 <xTaskIncrementTick>
    194e:	81 11       	cpse	r24, r1
    1950:	d0 93 1d 06 	sts	0x061D, r29	; 0x80061d <xYieldPending>
    1954:	c1 50       	subi	r28, 0x01	; 1
    1956:	c9 f7       	brne	.-14     	; 0x194a <xTaskResumeAll+0xc2>
    1958:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <uxPendedTicks>
    195c:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <xYieldPending>
    1960:	88 23       	and	r24, r24
    1962:	31 f0       	breq	.+12     	; 0x1970 <xTaskResumeAll+0xe8>
    1964:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <xTaskResumeAll+0xea>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <xTaskResumeAll+0xea>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	08 95       	ret

00001986 <vTaskDelay>:
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	ec 01       	movw	r28, r24
    198c:	89 2b       	or	r24, r25
    198e:	51 f0       	breq	.+20     	; 0x19a4 <vTaskDelay+0x1e>
    1990:	0e 94 83 0b 	call	0x1706	; 0x1706 <vTaskSuspendAll>
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	ce 01       	movw	r24, r28
    1998:	0e 94 00 0a 	call	0x1400	; 0x1400 <prvAddCurrentTaskToDelayedList>
    199c:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    19a0:	81 11       	cpse	r24, r1
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <vTaskDelay+0x22>
    19a4:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <prvIdleTask>:
    19ae:	05 e2       	ldi	r16, 0x25	; 37
    19b0:	16 e0       	ldi	r17, 0x06	; 6
    19b2:	0f 2e       	mov	r0, r31
    19b4:	fd e4       	ldi	r31, 0x4D	; 77
    19b6:	ef 2e       	mov	r14, r31
    19b8:	f6 e0       	ldi	r31, 0x06	; 6
    19ba:	ff 2e       	mov	r15, r31
    19bc:	f0 2d       	mov	r31, r0
    19be:	29 c0       	rjmp	.+82     	; 0x1a12 <prvIdleTask+0x64>
    19c0:	0e 94 83 0b 	call	0x1706	; 0x1706 <vTaskSuspendAll>
    19c4:	d8 01       	movw	r26, r16
    19c6:	cc 91       	ld	r28, X
    19c8:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskResumeAll>
    19cc:	cc 23       	and	r28, r28
    19ce:	09 f1       	breq	.+66     	; 0x1a12 <prvIdleTask+0x64>
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	0f 92       	push	r0
    19d6:	d8 01       	movw	r26, r16
    19d8:	15 96       	adiw	r26, 0x05	; 5
    19da:	ed 91       	ld	r30, X+
    19dc:	fc 91       	ld	r31, X
    19de:	16 97       	sbiw	r26, 0x06	; 6
    19e0:	c6 81       	ldd	r28, Z+6	; 0x06
    19e2:	d7 81       	ldd	r29, Z+7	; 0x07
    19e4:	ce 01       	movw	r24, r28
    19e6:	02 96       	adiw	r24, 0x02	; 2
    19e8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    19ec:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <uxCurrentNumberOfTasks>
    19f0:	81 50       	subi	r24, 0x01	; 1
    19f2:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <uxCurrentNumberOfTasks>
    19f6:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <uxDeletedTasksWaitingCleanUp>
    19fa:	81 50       	subi	r24, 0x01	; 1
    19fc:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <uxDeletedTasksWaitingCleanUp>
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	0e 94 22 05 	call	0xa44	; 0xa44 <vPortFree>
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	0e 94 22 05 	call	0xa44	; 0xa44 <vPortFree>
    1a12:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <uxDeletedTasksWaitingCleanUp>
    1a16:	81 11       	cpse	r24, r1
    1a18:	d3 cf       	rjmp	.-90     	; 0x19c0 <prvIdleTask+0x12>
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	10 f0       	brcs	.+4      	; 0x1a26 <prvIdleTask+0x78>
    1a22:	0e 94 35 04 	call	0x86a	; 0x86a <vPortYield>
    1a26:	0e 94 de 01 	call	0x3bc	; 0x3bc <vApplicationIdleHook>
    1a2a:	f3 cf       	rjmp	.-26     	; 0x1a12 <prvIdleTask+0x64>

00001a2c <vTaskSetApplicationTaskTag>:
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	21 f4       	brne	.+8      	; 0x1a38 <vTaskSetApplicationTaskTag+0xc>
    1a30:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <pxCurrentTCB>
    1a34:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	0f 92       	push	r0
    1a3e:	fc 01       	movw	r30, r24
    1a40:	76 a3       	std	Z+38, r23	; 0x26
    1a42:	65 a3       	std	Z+37, r22	; 0x25
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	08 95       	ret

00001a4a <vTaskSwitchContext>:
    1a4a:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <uxSchedulerSuspended>
    1a4e:	88 23       	and	r24, r24
    1a50:	21 f0       	breq	.+8      	; 0x1a5a <vTaskSwitchContext+0x10>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <xYieldPending>
    1a58:	08 95       	ret
    1a5a:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <xYieldPending>
    1a5e:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1a62:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1a66:	85 a1       	ldd	r24, Z+37	; 0x25
    1a68:	0e 94 be 02 	call	0x57c	; 0x57c <switch_out>
    1a6c:	20 91 20 06 	lds	r18, 0x0620	; 0x800620 <uxTopReadyPriority>
    1a70:	82 2f       	mov	r24, r18
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	fc 01       	movw	r30, r24
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	e8 0f       	add	r30, r24
    1a84:	f9 1f       	adc	r31, r25
    1a86:	e3 5b       	subi	r30, 0xB3	; 179
    1a88:	f9 4f       	sbci	r31, 0xF9	; 249
    1a8a:	30 81       	ld	r19, Z
    1a8c:	31 11       	cpse	r19, r1
    1a8e:	11 c0       	rjmp	.+34     	; 0x1ab2 <vTaskSwitchContext+0x68>
    1a90:	21 50       	subi	r18, 0x01	; 1
    1a92:	82 2f       	mov	r24, r18
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	fc 01       	movw	r30, r24
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	e8 0f       	add	r30, r24
    1aa6:	f9 1f       	adc	r31, r25
    1aa8:	e3 5b       	subi	r30, 0xB3	; 179
    1aaa:	f9 4f       	sbci	r31, 0xF9	; 249
    1aac:	30 81       	ld	r19, Z
    1aae:	33 23       	and	r19, r19
    1ab0:	79 f3       	breq	.-34     	; 0x1a90 <vTaskSwitchContext+0x46>
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	44 0f       	add	r20, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	44 0f       	add	r20, r20
    1aba:	55 1f       	adc	r21, r21
    1abc:	44 0f       	add	r20, r20
    1abe:	55 1f       	adc	r21, r21
    1ac0:	48 0f       	add	r20, r24
    1ac2:	59 1f       	adc	r21, r25
    1ac4:	da 01       	movw	r26, r20
    1ac6:	a3 5b       	subi	r26, 0xB3	; 179
    1ac8:	b9 4f       	sbci	r27, 0xF9	; 249
    1aca:	11 96       	adiw	r26, 0x01	; 1
    1acc:	ed 91       	ld	r30, X+
    1ace:	fc 91       	ld	r31, X
    1ad0:	12 97       	sbiw	r26, 0x02	; 2
    1ad2:	02 80       	ldd	r0, Z+2	; 0x02
    1ad4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ad6:	e0 2d       	mov	r30, r0
    1ad8:	12 96       	adiw	r26, 0x02	; 2
    1ada:	fc 93       	st	X, r31
    1adc:	ee 93       	st	-X, r30
    1ade:	11 97       	sbiw	r26, 0x01	; 1
    1ae0:	40 5b       	subi	r20, 0xB0	; 176
    1ae2:	59 4f       	sbci	r21, 0xF9	; 249
    1ae4:	e4 17       	cp	r30, r20
    1ae6:	f5 07       	cpc	r31, r21
    1ae8:	29 f4       	brne	.+10     	; 0x1af4 <vTaskSwitchContext+0xaa>
    1aea:	42 81       	ldd	r20, Z+2	; 0x02
    1aec:	53 81       	ldd	r21, Z+3	; 0x03
    1aee:	fd 01       	movw	r30, r26
    1af0:	52 83       	std	Z+2, r21	; 0x02
    1af2:	41 83       	std	Z+1, r20	; 0x01
    1af4:	fc 01       	movw	r30, r24
    1af6:	ee 0f       	add	r30, r30
    1af8:	ff 1f       	adc	r31, r31
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	8e 0f       	add	r24, r30
    1b04:	9f 1f       	adc	r25, r31
    1b06:	fc 01       	movw	r30, r24
    1b08:	e3 5b       	subi	r30, 0xB3	; 179
    1b0a:	f9 4f       	sbci	r31, 0xF9	; 249
    1b0c:	01 80       	ldd	r0, Z+1	; 0x01
    1b0e:	f2 81       	ldd	r31, Z+2	; 0x02
    1b10:	e0 2d       	mov	r30, r0
    1b12:	86 81       	ldd	r24, Z+6	; 0x06
    1b14:	97 81       	ldd	r25, Z+7	; 0x07
    1b16:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <pxCurrentTCB+0x1>
    1b1a:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <pxCurrentTCB>
    1b1e:	20 93 20 06 	sts	0x0620, r18	; 0x800620 <uxTopReadyPriority>
    1b22:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1b26:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1b2a:	85 a1       	ldd	r24, Z+37	; 0x25
    1b2c:	0e 94 b3 02 	call	0x566	; 0x566 <switch_in>
    1b30:	08 95       	ret

00001b32 <vTaskPlaceOnEventList>:
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	eb 01       	movw	r28, r22
    1b38:	60 91 71 06 	lds	r22, 0x0671	; 0x800671 <pxCurrentTCB>
    1b3c:	70 91 72 06 	lds	r23, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1b40:	64 5f       	subi	r22, 0xF4	; 244
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	0e 94 38 03 	call	0x670	; 0x670 <vListInsert>
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	0e 94 00 0a 	call	0x1400	; 0x1400 <prvAddCurrentTaskToDelayedList>
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	08 95       	ret

00001b56 <xTaskRemoveFromEventList>:
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	dc 01       	movw	r26, r24
    1b60:	15 96       	adiw	r26, 0x05	; 5
    1b62:	ed 91       	ld	r30, X+
    1b64:	fc 91       	ld	r31, X
    1b66:	16 97       	sbiw	r26, 0x06	; 6
    1b68:	c6 81       	ldd	r28, Z+6	; 0x06
    1b6a:	d7 81       	ldd	r29, Z+7	; 0x07
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	04 5f       	subi	r16, 0xF4	; 244
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	c8 01       	movw	r24, r16
    1b74:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    1b78:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <uxSchedulerSuspended>
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	1c c0       	rjmp	.+56     	; 0x1bb8 <xTaskRemoveFromEventList+0x62>
    1b80:	0a 50       	subi	r16, 0x0A	; 10
    1b82:	11 09       	sbc	r17, r1
    1b84:	c8 01       	movw	r24, r16
    1b86:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    1b8a:	8e 89       	ldd	r24, Y+22	; 0x16
    1b8c:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <uxTopReadyPriority>
    1b90:	98 17       	cp	r25, r24
    1b92:	10 f4       	brcc	.+4      	; 0x1b98 <xTaskRemoveFromEventList+0x42>
    1b94:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <uxTopReadyPriority>
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	82 0f       	add	r24, r18
    1baa:	93 1f       	adc	r25, r19
    1bac:	b8 01       	movw	r22, r16
    1bae:	83 5b       	subi	r24, 0xB3	; 179
    1bb0:	99 4f       	sbci	r25, 0xF9	; 249
    1bb2:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <xTaskRemoveFromEventList+0x6c>
    1bb8:	b8 01       	movw	r22, r16
    1bba:	8e e2       	ldi	r24, 0x2E	; 46
    1bbc:	96 e0       	ldi	r25, 0x06	; 6
    1bbe:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
    1bc2:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1bc6:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1bca:	9e 89       	ldd	r25, Y+22	; 0x16
    1bcc:	86 89       	ldd	r24, Z+22	; 0x16
    1bce:	89 17       	cp	r24, r25
    1bd0:	20 f4       	brcc	.+8      	; 0x1bda <xTaskRemoveFromEventList+0x84>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <xYieldPending>
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <xTaskRemoveFromEventList+0x86>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <vTaskSetTimeOutState>:
    1be6:	20 91 1c 06 	lds	r18, 0x061C	; 0x80061c <xNumOfOverflows>
    1bea:	fc 01       	movw	r30, r24
    1bec:	20 83       	st	Z, r18
    1bee:	20 91 21 06 	lds	r18, 0x0621	; 0x800621 <xTickCount>
    1bf2:	30 91 22 06 	lds	r19, 0x0622	; 0x800622 <xTickCount+0x1>
    1bf6:	32 83       	std	Z+2, r19	; 0x02
    1bf8:	21 83       	std	Z+1, r18	; 0x01
    1bfa:	08 95       	ret

00001bfc <xTaskCheckForTimeOut>:
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	fc 01       	movw	r30, r24
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	0f 92       	push	r0
    1c08:	20 91 21 06 	lds	r18, 0x0621	; 0x800621 <xTickCount>
    1c0c:	30 91 22 06 	lds	r19, 0x0622	; 0x800622 <xTickCount+0x1>
    1c10:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <xNumOfOverflows>
    1c14:	90 81       	ld	r25, Z
    1c16:	98 17       	cp	r25, r24
    1c18:	29 f0       	breq	.+10     	; 0x1c24 <xTaskCheckForTimeOut+0x28>
    1c1a:	81 81       	ldd	r24, Z+1	; 0x01
    1c1c:	92 81       	ldd	r25, Z+2	; 0x02
    1c1e:	28 17       	cp	r18, r24
    1c20:	39 07       	cpc	r19, r25
    1c22:	b0 f4       	brcc	.+44     	; 0x1c50 <xTaskCheckForTimeOut+0x54>
    1c24:	a1 81       	ldd	r26, Z+1	; 0x01
    1c26:	b2 81       	ldd	r27, Z+2	; 0x02
    1c28:	eb 01       	movw	r28, r22
    1c2a:	48 81       	ld	r20, Y
    1c2c:	59 81       	ldd	r21, Y+1	; 0x01
    1c2e:	c9 01       	movw	r24, r18
    1c30:	8a 1b       	sub	r24, r26
    1c32:	9b 0b       	sbc	r25, r27
    1c34:	84 17       	cp	r24, r20
    1c36:	95 07       	cpc	r25, r21
    1c38:	68 f4       	brcc	.+26     	; 0x1c54 <xTaskCheckForTimeOut+0x58>
    1c3a:	cf 01       	movw	r24, r30
    1c3c:	a2 1b       	sub	r26, r18
    1c3e:	b3 0b       	sbc	r27, r19
    1c40:	4a 0f       	add	r20, r26
    1c42:	5b 1f       	adc	r21, r27
    1c44:	59 83       	std	Y+1, r21	; 0x01
    1c46:	48 83       	st	Y, r20
    1c48:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vTaskSetTimeOutState>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <xTaskCheckForTimeOut+0x5a>
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <xTaskCheckForTimeOut+0x5a>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0f 90       	pop	r0
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	08 95       	ret

00001c60 <vTaskMissedYield>:
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <xYieldPending>
    1c66:	08 95       	ret

00001c68 <vTaskPriorityInherit>:
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	fc 01       	movw	r30, r24
    1c72:	89 2b       	or	r24, r25
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <vTaskPriorityInherit+0x10>
    1c76:	55 c0       	rjmp	.+170    	; 0x1d22 <vTaskPriorityInherit+0xba>
    1c78:	26 89       	ldd	r18, Z+22	; 0x16
    1c7a:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
    1c7e:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1c82:	56 96       	adiw	r26, 0x16	; 22
    1c84:	8c 91       	ld	r24, X
    1c86:	28 17       	cp	r18, r24
    1c88:	08 f0       	brcs	.+2      	; 0x1c8c <vTaskPriorityInherit+0x24>
    1c8a:	4b c0       	rjmp	.+150    	; 0x1d22 <vTaskPriorityInherit+0xba>
    1c8c:	84 85       	ldd	r24, Z+12	; 0x0c
    1c8e:	95 85       	ldd	r25, Z+13	; 0x0d
    1c90:	99 23       	and	r25, r25
    1c92:	64 f0       	brlt	.+24     	; 0x1cac <vTaskPriorityInherit+0x44>
    1c94:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
    1c98:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1c9c:	56 96       	adiw	r26, 0x16	; 22
    1c9e:	3c 91       	ld	r19, X
    1ca0:	84 e0       	ldi	r24, 0x04	; 4
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	83 1b       	sub	r24, r19
    1ca6:	91 09       	sbc	r25, r1
    1ca8:	95 87       	std	Z+13, r25	; 0x0d
    1caa:	84 87       	std	Z+12, r24	; 0x0c
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	c9 01       	movw	r24, r18
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	28 0f       	add	r18, r24
    1cbe:	39 1f       	adc	r19, r25
    1cc0:	23 5b       	subi	r18, 0xB3	; 179
    1cc2:	39 4f       	sbci	r19, 0xF9	; 249
    1cc4:	82 85       	ldd	r24, Z+10	; 0x0a
    1cc6:	93 85       	ldd	r25, Z+11	; 0x0b
    1cc8:	82 17       	cp	r24, r18
    1cca:	93 07       	cpc	r25, r19
    1ccc:	19 f5       	brne	.+70     	; 0x1d14 <vTaskPriorityInherit+0xac>
    1cce:	8f 01       	movw	r16, r30
    1cd0:	ef 01       	movw	r28, r30
    1cd2:	22 96       	adiw	r28, 0x02	; 2
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    1cda:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1cde:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1ce2:	86 89       	ldd	r24, Z+22	; 0x16
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	86 8b       	std	Z+22, r24	; 0x16
    1ce8:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <uxTopReadyPriority>
    1cec:	98 17       	cp	r25, r24
    1cee:	10 f4       	brcc	.+4      	; 0x1cf4 <vTaskPriorityInherit+0x8c>
    1cf0:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <uxTopReadyPriority>
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 01       	movw	r18, r24
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	82 0f       	add	r24, r18
    1d06:	93 1f       	adc	r25, r19
    1d08:	be 01       	movw	r22, r28
    1d0a:	83 5b       	subi	r24, 0xB3	; 179
    1d0c:	99 4f       	sbci	r25, 0xF9	; 249
    1d0e:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
    1d12:	07 c0       	rjmp	.+14     	; 0x1d22 <vTaskPriorityInherit+0xba>
    1d14:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <pxCurrentTCB>
    1d18:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1d1c:	56 96       	adiw	r26, 0x16	; 22
    1d1e:	8c 91       	ld	r24, X
    1d20:	86 8b       	std	Z+22, r24	; 0x16
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <xTaskPriorityDisinherit>:
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	fc 01       	movw	r30, r24
    1d36:	89 2b       	or	r24, r25
    1d38:	79 f1       	breq	.+94     	; 0x1d98 <xTaskPriorityDisinherit+0x6c>
    1d3a:	84 a1       	ldd	r24, Z+36	; 0x24
    1d3c:	81 50       	subi	r24, 0x01	; 1
    1d3e:	84 a3       	std	Z+36, r24	; 0x24
    1d40:	26 89       	ldd	r18, Z+22	; 0x16
    1d42:	93 a1       	ldd	r25, Z+35	; 0x23
    1d44:	29 17       	cp	r18, r25
    1d46:	51 f1       	breq	.+84     	; 0x1d9c <xTaskPriorityDisinherit+0x70>
    1d48:	81 11       	cpse	r24, r1
    1d4a:	2a c0       	rjmp	.+84     	; 0x1da0 <xTaskPriorityDisinherit+0x74>
    1d4c:	ef 01       	movw	r28, r30
    1d4e:	8f 01       	movw	r16, r30
    1d50:	0e 5f       	subi	r16, 0xFE	; 254
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 69 03 	call	0x6d2	; 0x6d2 <uxListRemove>
    1d5a:	8b a1       	ldd	r24, Y+35	; 0x23
    1d5c:	8e 8b       	std	Y+22, r24	; 0x16
    1d5e:	24 e0       	ldi	r18, 0x04	; 4
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	28 1b       	sub	r18, r24
    1d64:	31 09       	sbc	r19, r1
    1d66:	3d 87       	std	Y+13, r19	; 0x0d
    1d68:	2c 87       	std	Y+12, r18	; 0x0c
    1d6a:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <uxTopReadyPriority>
    1d6e:	98 17       	cp	r25, r24
    1d70:	10 f4       	brcc	.+4      	; 0x1d76 <xTaskPriorityDisinherit+0x4a>
    1d72:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <uxTopReadyPriority>
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9c 01       	movw	r18, r24
    1d7a:	22 0f       	add	r18, r18
    1d7c:	33 1f       	adc	r19, r19
    1d7e:	22 0f       	add	r18, r18
    1d80:	33 1f       	adc	r19, r19
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	82 0f       	add	r24, r18
    1d88:	93 1f       	adc	r25, r19
    1d8a:	b8 01       	movw	r22, r16
    1d8c:	83 5b       	subi	r24, 0xB3	; 179
    1d8e:	99 4f       	sbci	r25, 0xF9	; 249
    1d90:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <xTaskPriorityDisinherit+0x76>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <xTaskPriorityDisinherit+0x76>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <xTaskPriorityDisinherit+0x76>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	08 95       	ret

00001dac <pvTaskIncrementMutexHeldCount>:
    1dac:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <pxCurrentTCB>
    1db0:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1db4:	89 2b       	or	r24, r25
    1db6:	39 f0       	breq	.+14     	; 0x1dc6 <pvTaskIncrementMutexHeldCount+0x1a>
    1db8:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <pxCurrentTCB>
    1dbc:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1dc0:	84 a1       	ldd	r24, Z+36	; 0x24
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	84 a3       	std	Z+36, r24	; 0x24
    1dc6:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <pxCurrentTCB>
    1dca:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <pxCurrentTCB+0x1>
    1dce:	08 95       	ret

00001dd0 <__udivmodsi4>:
    1dd0:	a1 e2       	ldi	r26, 0x21	; 33
    1dd2:	1a 2e       	mov	r1, r26
    1dd4:	aa 1b       	sub	r26, r26
    1dd6:	bb 1b       	sub	r27, r27
    1dd8:	fd 01       	movw	r30, r26
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <__udivmodsi4_ep>

00001ddc <__udivmodsi4_loop>:
    1ddc:	aa 1f       	adc	r26, r26
    1dde:	bb 1f       	adc	r27, r27
    1de0:	ee 1f       	adc	r30, r30
    1de2:	ff 1f       	adc	r31, r31
    1de4:	a2 17       	cp	r26, r18
    1de6:	b3 07       	cpc	r27, r19
    1de8:	e4 07       	cpc	r30, r20
    1dea:	f5 07       	cpc	r31, r21
    1dec:	20 f0       	brcs	.+8      	; 0x1df6 <__udivmodsi4_ep>
    1dee:	a2 1b       	sub	r26, r18
    1df0:	b3 0b       	sbc	r27, r19
    1df2:	e4 0b       	sbc	r30, r20
    1df4:	f5 0b       	sbc	r31, r21

00001df6 <__udivmodsi4_ep>:
    1df6:	66 1f       	adc	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	1a 94       	dec	r1
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <__udivmodsi4_loop>
    1e02:	60 95       	com	r22
    1e04:	70 95       	com	r23
    1e06:	80 95       	com	r24
    1e08:	90 95       	com	r25
    1e0a:	9b 01       	movw	r18, r22
    1e0c:	ac 01       	movw	r20, r24
    1e0e:	bd 01       	movw	r22, r26
    1e10:	cf 01       	movw	r24, r30
    1e12:	08 95       	ret

00001e14 <__tablejump2__>:
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	05 90       	lpm	r0, Z+
    1e1a:	f4 91       	lpm	r31, Z
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	09 94       	ijmp

00001e20 <malloc>:
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	82 30       	cpi	r24, 0x02	; 2
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	10 f4       	brcc	.+4      	; 0x1e32 <malloc+0x12>
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	e0 91 75 06 	lds	r30, 0x0675	; 0x800675 <__flp>
    1e36:	f0 91 76 06 	lds	r31, 0x0676	; 0x800676 <__flp+0x1>
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	a0 e0       	ldi	r26, 0x00	; 0
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	30 97       	sbiw	r30, 0x00	; 0
    1e44:	19 f1       	breq	.+70     	; 0x1e8c <malloc+0x6c>
    1e46:	40 81       	ld	r20, Z
    1e48:	51 81       	ldd	r21, Z+1	; 0x01
    1e4a:	02 81       	ldd	r16, Z+2	; 0x02
    1e4c:	13 81       	ldd	r17, Z+3	; 0x03
    1e4e:	48 17       	cp	r20, r24
    1e50:	59 07       	cpc	r21, r25
    1e52:	c8 f0       	brcs	.+50     	; 0x1e86 <malloc+0x66>
    1e54:	84 17       	cp	r24, r20
    1e56:	95 07       	cpc	r25, r21
    1e58:	69 f4       	brne	.+26     	; 0x1e74 <malloc+0x54>
    1e5a:	10 97       	sbiw	r26, 0x00	; 0
    1e5c:	31 f0       	breq	.+12     	; 0x1e6a <malloc+0x4a>
    1e5e:	12 96       	adiw	r26, 0x02	; 2
    1e60:	0c 93       	st	X, r16
    1e62:	12 97       	sbiw	r26, 0x02	; 2
    1e64:	13 96       	adiw	r26, 0x03	; 3
    1e66:	1c 93       	st	X, r17
    1e68:	27 c0       	rjmp	.+78     	; 0x1eb8 <malloc+0x98>
    1e6a:	00 93 75 06 	sts	0x0675, r16	; 0x800675 <__flp>
    1e6e:	10 93 76 06 	sts	0x0676, r17	; 0x800676 <__flp+0x1>
    1e72:	22 c0       	rjmp	.+68     	; 0x1eb8 <malloc+0x98>
    1e74:	21 15       	cp	r18, r1
    1e76:	31 05       	cpc	r19, r1
    1e78:	19 f0       	breq	.+6      	; 0x1e80 <malloc+0x60>
    1e7a:	42 17       	cp	r20, r18
    1e7c:	53 07       	cpc	r21, r19
    1e7e:	18 f4       	brcc	.+6      	; 0x1e86 <malloc+0x66>
    1e80:	9a 01       	movw	r18, r20
    1e82:	bd 01       	movw	r22, r26
    1e84:	ef 01       	movw	r28, r30
    1e86:	df 01       	movw	r26, r30
    1e88:	f8 01       	movw	r30, r16
    1e8a:	db cf       	rjmp	.-74     	; 0x1e42 <malloc+0x22>
    1e8c:	21 15       	cp	r18, r1
    1e8e:	31 05       	cpc	r19, r1
    1e90:	f9 f0       	breq	.+62     	; 0x1ed0 <malloc+0xb0>
    1e92:	28 1b       	sub	r18, r24
    1e94:	39 0b       	sbc	r19, r25
    1e96:	24 30       	cpi	r18, 0x04	; 4
    1e98:	31 05       	cpc	r19, r1
    1e9a:	80 f4       	brcc	.+32     	; 0x1ebc <malloc+0x9c>
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	61 15       	cp	r22, r1
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	21 f0       	breq	.+8      	; 0x1eae <malloc+0x8e>
    1ea6:	fb 01       	movw	r30, r22
    1ea8:	93 83       	std	Z+3, r25	; 0x03
    1eaa:	82 83       	std	Z+2, r24	; 0x02
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <malloc+0x96>
    1eae:	90 93 76 06 	sts	0x0676, r25	; 0x800676 <__flp+0x1>
    1eb2:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__flp>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	32 96       	adiw	r30, 0x02	; 2
    1eba:	44 c0       	rjmp	.+136    	; 0x1f44 <malloc+0x124>
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e2 0f       	add	r30, r18
    1ec0:	f3 1f       	adc	r31, r19
    1ec2:	81 93       	st	Z+, r24
    1ec4:	91 93       	st	Z+, r25
    1ec6:	22 50       	subi	r18, 0x02	; 2
    1ec8:	31 09       	sbc	r19, r1
    1eca:	39 83       	std	Y+1, r19	; 0x01
    1ecc:	28 83       	st	Y, r18
    1ece:	3a c0       	rjmp	.+116    	; 0x1f44 <malloc+0x124>
    1ed0:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <__brkval>
    1ed4:	30 91 74 06 	lds	r19, 0x0674	; 0x800674 <__brkval+0x1>
    1ed8:	23 2b       	or	r18, r19
    1eda:	41 f4       	brne	.+16     	; 0x1eec <malloc+0xcc>
    1edc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1ee0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1ee4:	30 93 74 06 	sts	0x0674, r19	; 0x800674 <__brkval+0x1>
    1ee8:	20 93 73 06 	sts	0x0673, r18	; 0x800673 <__brkval>
    1eec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1ef0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1ef4:	21 15       	cp	r18, r1
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	41 f4       	brne	.+16     	; 0x1f0a <malloc+0xea>
    1efa:	2d b7       	in	r18, 0x3d	; 61
    1efc:	3e b7       	in	r19, 0x3e	; 62
    1efe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f02:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f06:	24 1b       	sub	r18, r20
    1f08:	35 0b       	sbc	r19, r21
    1f0a:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <__brkval>
    1f0e:	f0 91 74 06 	lds	r31, 0x0674	; 0x800674 <__brkval+0x1>
    1f12:	e2 17       	cp	r30, r18
    1f14:	f3 07       	cpc	r31, r19
    1f16:	a0 f4       	brcc	.+40     	; 0x1f40 <malloc+0x120>
    1f18:	2e 1b       	sub	r18, r30
    1f1a:	3f 0b       	sbc	r19, r31
    1f1c:	28 17       	cp	r18, r24
    1f1e:	39 07       	cpc	r19, r25
    1f20:	78 f0       	brcs	.+30     	; 0x1f40 <malloc+0x120>
    1f22:	ac 01       	movw	r20, r24
    1f24:	4e 5f       	subi	r20, 0xFE	; 254
    1f26:	5f 4f       	sbci	r21, 0xFF	; 255
    1f28:	24 17       	cp	r18, r20
    1f2a:	35 07       	cpc	r19, r21
    1f2c:	48 f0       	brcs	.+18     	; 0x1f40 <malloc+0x120>
    1f2e:	4e 0f       	add	r20, r30
    1f30:	5f 1f       	adc	r21, r31
    1f32:	50 93 74 06 	sts	0x0674, r21	; 0x800674 <__brkval+0x1>
    1f36:	40 93 73 06 	sts	0x0673, r20	; 0x800673 <__brkval>
    1f3a:	81 93       	st	Z+, r24
    1f3c:	91 93       	st	Z+, r25
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <malloc+0x124>
    1f40:	e0 e0       	ldi	r30, 0x00	; 0
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	cf 01       	movw	r24, r30
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	08 95       	ret

00001f50 <free>:
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <free+0xa>
    1f58:	81 c0       	rjmp	.+258    	; 0x205c <free+0x10c>
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	32 97       	sbiw	r30, 0x02	; 2
    1f5e:	13 82       	std	Z+3, r1	; 0x03
    1f60:	12 82       	std	Z+2, r1	; 0x02
    1f62:	a0 91 75 06 	lds	r26, 0x0675	; 0x800675 <__flp>
    1f66:	b0 91 76 06 	lds	r27, 0x0676	; 0x800676 <__flp+0x1>
    1f6a:	10 97       	sbiw	r26, 0x00	; 0
    1f6c:	81 f4       	brne	.+32     	; 0x1f8e <free+0x3e>
    1f6e:	20 81       	ld	r18, Z
    1f70:	31 81       	ldd	r19, Z+1	; 0x01
    1f72:	82 0f       	add	r24, r18
    1f74:	93 1f       	adc	r25, r19
    1f76:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <__brkval>
    1f7a:	30 91 74 06 	lds	r19, 0x0674	; 0x800674 <__brkval+0x1>
    1f7e:	28 17       	cp	r18, r24
    1f80:	39 07       	cpc	r19, r25
    1f82:	51 f5       	brne	.+84     	; 0x1fd8 <free+0x88>
    1f84:	f0 93 74 06 	sts	0x0674, r31	; 0x800674 <__brkval+0x1>
    1f88:	e0 93 73 06 	sts	0x0673, r30	; 0x800673 <__brkval>
    1f8c:	67 c0       	rjmp	.+206    	; 0x205c <free+0x10c>
    1f8e:	ed 01       	movw	r28, r26
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	ce 17       	cp	r28, r30
    1f96:	df 07       	cpc	r29, r31
    1f98:	40 f4       	brcc	.+16     	; 0x1faa <free+0x5a>
    1f9a:	4a 81       	ldd	r20, Y+2	; 0x02
    1f9c:	5b 81       	ldd	r21, Y+3	; 0x03
    1f9e:	9e 01       	movw	r18, r28
    1fa0:	41 15       	cp	r20, r1
    1fa2:	51 05       	cpc	r21, r1
    1fa4:	f1 f0       	breq	.+60     	; 0x1fe2 <free+0x92>
    1fa6:	ea 01       	movw	r28, r20
    1fa8:	f5 cf       	rjmp	.-22     	; 0x1f94 <free+0x44>
    1faa:	d3 83       	std	Z+3, r29	; 0x03
    1fac:	c2 83       	std	Z+2, r28	; 0x02
    1fae:	40 81       	ld	r20, Z
    1fb0:	51 81       	ldd	r21, Z+1	; 0x01
    1fb2:	84 0f       	add	r24, r20
    1fb4:	95 1f       	adc	r25, r21
    1fb6:	c8 17       	cp	r28, r24
    1fb8:	d9 07       	cpc	r29, r25
    1fba:	59 f4       	brne	.+22     	; 0x1fd2 <free+0x82>
    1fbc:	88 81       	ld	r24, Y
    1fbe:	99 81       	ldd	r25, Y+1	; 0x01
    1fc0:	84 0f       	add	r24, r20
    1fc2:	95 1f       	adc	r25, r21
    1fc4:	02 96       	adiw	r24, 0x02	; 2
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	93 83       	std	Z+3, r25	; 0x03
    1fd0:	82 83       	std	Z+2, r24	; 0x02
    1fd2:	21 15       	cp	r18, r1
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	29 f4       	brne	.+10     	; 0x1fe2 <free+0x92>
    1fd8:	f0 93 76 06 	sts	0x0676, r31	; 0x800676 <__flp+0x1>
    1fdc:	e0 93 75 06 	sts	0x0675, r30	; 0x800675 <__flp>
    1fe0:	3d c0       	rjmp	.+122    	; 0x205c <free+0x10c>
    1fe2:	e9 01       	movw	r28, r18
    1fe4:	fb 83       	std	Y+3, r31	; 0x03
    1fe6:	ea 83       	std	Y+2, r30	; 0x02
    1fe8:	49 91       	ld	r20, Y+
    1fea:	59 91       	ld	r21, Y+
    1fec:	c4 0f       	add	r28, r20
    1fee:	d5 1f       	adc	r29, r21
    1ff0:	ec 17       	cp	r30, r28
    1ff2:	fd 07       	cpc	r31, r29
    1ff4:	61 f4       	brne	.+24     	; 0x200e <free+0xbe>
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	84 0f       	add	r24, r20
    1ffc:	95 1f       	adc	r25, r21
    1ffe:	02 96       	adiw	r24, 0x02	; 2
    2000:	e9 01       	movw	r28, r18
    2002:	99 83       	std	Y+1, r25	; 0x01
    2004:	88 83       	st	Y, r24
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	9b 83       	std	Y+3, r25	; 0x03
    200c:	8a 83       	std	Y+2, r24	; 0x02
    200e:	e0 e0       	ldi	r30, 0x00	; 0
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	12 96       	adiw	r26, 0x02	; 2
    2014:	8d 91       	ld	r24, X+
    2016:	9c 91       	ld	r25, X
    2018:	13 97       	sbiw	r26, 0x03	; 3
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	19 f0       	breq	.+6      	; 0x2024 <free+0xd4>
    201e:	fd 01       	movw	r30, r26
    2020:	dc 01       	movw	r26, r24
    2022:	f7 cf       	rjmp	.-18     	; 0x2012 <free+0xc2>
    2024:	8d 91       	ld	r24, X+
    2026:	9c 91       	ld	r25, X
    2028:	11 97       	sbiw	r26, 0x01	; 1
    202a:	9d 01       	movw	r18, r26
    202c:	2e 5f       	subi	r18, 0xFE	; 254
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <__brkval>
    2038:	30 91 74 06 	lds	r19, 0x0674	; 0x800674 <__brkval+0x1>
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	69 f4       	brne	.+26     	; 0x205c <free+0x10c>
    2042:	30 97       	sbiw	r30, 0x00	; 0
    2044:	29 f4       	brne	.+10     	; 0x2050 <free+0x100>
    2046:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <__flp+0x1>
    204a:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <__flp>
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <free+0x104>
    2050:	13 82       	std	Z+3, r1	; 0x03
    2052:	12 82       	std	Z+2, r1	; 0x02
    2054:	b0 93 74 06 	sts	0x0674, r27	; 0x800674 <__brkval+0x1>
    2058:	a0 93 73 06 	sts	0x0673, r26	; 0x800673 <__brkval>
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <memcpy>:
    2062:	fb 01       	movw	r30, r22
    2064:	dc 01       	movw	r26, r24
    2066:	02 c0       	rjmp	.+4      	; 0x206c <memcpy+0xa>
    2068:	01 90       	ld	r0, Z+
    206a:	0d 92       	st	X+, r0
    206c:	41 50       	subi	r20, 0x01	; 1
    206e:	50 40       	sbci	r21, 0x00	; 0
    2070:	d8 f7       	brcc	.-10     	; 0x2068 <memcpy+0x6>
    2072:	08 95       	ret

00002074 <memset>:
    2074:	dc 01       	movw	r26, r24
    2076:	01 c0       	rjmp	.+2      	; 0x207a <memset+0x6>
    2078:	6d 93       	st	X+, r22
    207a:	41 50       	subi	r20, 0x01	; 1
    207c:	50 40       	sbci	r21, 0x00	; 0
    207e:	e0 f7       	brcc	.-8      	; 0x2078 <memset+0x4>
    2080:	08 95       	ret

00002082 <_exit>:
    2082:	f8 94       	cli

00002084 <__stop_program>:
    2084:	ff cf       	rjmp	.-2      	; 0x2084 <__stop_program>
